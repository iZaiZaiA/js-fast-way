{"version":3,"file":"index.umd.js","sources":["../packages/src/type.js","../packages/plugins/area.js","../packages/plugins/verify.js","../packages/src/validate.js","../packages/src/array.js","../packages/plugins/immer.js","../packages/src/object.js","../packages/src/file.js","../packages/src/random.js","../packages/src/to.js","../packages/src/store.js","../packages/plugins/color.js","../packages/src/os.js","../packages/src/dependency.js","../packages/hook/use-click.js","../packages/hook/use-mitt.js","../node_modules/bignumber.js/bignumber.mjs","../packages/plugins/number.js","../packages/hook/use-defer.js"],"sourcesContent":["// 获取对象原型的toString方法\nconst toString = Object.prototype.toString;\n\n/**\n * 判断值是否为某个类型\n * @param {*} value 数据内容\n * @param {string} type 类型名称\n * @returns {boolean} 是否为指定类型\n */\nexport function type(value, type) {\n    return toString.call(value) === `[object ${type}]`;\n}\n\n/**\n * 获取对象数据类型\n * @param {*} obj 数据内容\n * @returns {string} 数据类型\n */\nexport function getObjType(obj) {\n    if (obj instanceof Element) return 'element';\n    const typeString = toString.call(obj);\n    const map = {\n        '[object Boolean]': 'boolean',\n        '[object Number]': 'number',\n        '[object String]': 'string',\n        '[object Function]': 'function',\n        '[object Array]': 'array',\n        '[object Date]': 'date',\n        '[object RegExp]': 'regExp',\n        '[object Undefined]': 'undefined',\n        '[object Null]': 'null',\n        '[object Object]': 'object'\n    };\n    return map[typeString] || 'unknown';\n}\n\n/**\n * 是否为字符串\n * @param {*} value 数据内容\n * @returns {boolean} 是否为字符串\n */\nexport function isString(value) {\n    return typeof value === 'string';\n}\n\n/**\n * 是否为数值\n * @param {*} value 数据内容\n * @returns {boolean} 是否为数值\n */\nexport function isNumber(value) {\n    return typeof value === 'number' && !isNaN(value);\n}\n\n/**\n * 是否为布尔值\n * @param {*} value 数据内容\n * @returns {boolean} 是否为布尔值\n */\nexport function isBoolean(value) {\n    return typeof value === 'boolean';\n}\n\n/**\n * 是否为数组\n * @param {*} value 数据内容\n * @returns {boolean} 是否为数组\n */\nexport function isArray(value) {\n    return Array.isArray(value);\n}\n\n/**\n * 是否为对象\n * @param {*} value 数据内容\n * @returns {boolean} 是否为对象\n */\nexport function isObject(value) {\n    return value !== null && typeof value === 'object' && !Array.isArray(value);\n}\n\n/**\n * 是否为时间对象\n * @param {*} value 数据内容\n * @returns {boolean} 是否为时间对象\n */\nexport function isDate(value) {\n    return value instanceof Date && !isNaN(value.getTime());\n}\n\n/**\n * 是否为函数\n * @param {*} func 数据内容\n * @returns {boolean} 是否为函数\n */\nexport function isFunction(func) {\n    return typeof func === 'function';\n}\n\n/**\n * 是否为异步函数\n * @param {*} func 数据内容\n * @returns {boolean} 是否为异步函数\n */\nexport function isAsyncFunction(func) {\n    return func instanceof AsyncFunction;\n}\n\n/**\n * 是否为Promise对象\n * @param {*} value 数据内容\n * @returns {boolean} 是否为Promise对象\n */\nexport function isPromise(value) {\n    return value instanceof Promise || (\n        isObject(value) && isFunction(value.then) && isFunction(value.catch)\n    );\n}\n\n/**\n * 是否为DOM元素\n * @param {*} value 数据内容\n * @returns {boolean} 是否为DOM元素\n */\nexport function isElement(value) {\n    return value instanceof Element || (\n        isObject(value) && isString(value.nodeName) && value.nodeType === 1\n    );\n}\n\n// 用于判断异步函数的构造函数\nconst AsyncFunction = (async () => {}).constructor;\n","/**\n * @file area.js\n * @description 行政区划（省市县三级）编码列表\n * @reference http://www.mca.gov.cn/article/sj/xzqh/1980/\n */\nexport default [\n    110101, 110102, 110103, 110104, 110105, 110106, 110107, 110108, 110109, 110110, 110111, 110112, 110113, 110114, 110115, 110116, 110117, 110118, 110119, 110201, 110202, 110203, 110204, 110205, 110206, 110207, 110208,\n    110209, 110221, 110222, 110223, 110224, 110225, 110226, 110227, 110228, 110229, 120101, 120102, 120103, 120104, 120105, 120106, 120107, 120108, 120109, 120110, 120111, 120112, 120113, 120114, 120115, 120116, 120117,\n    120118, 120119, 120201, 120202, 120203, 120204, 120205, 120221, 120222, 120223, 120224, 120225, 130101, 130102, 130103, 130104, 130105, 130106, 130107, 130108, 130109, 130110, 130111, 130121, 130122, 130123, 130124,\n    130125, 130126, 130127, 130128, 130129, 130130, 130131, 130132, 130133, 130181, 130182, 130183, 130184, 130185, 130201, 130202, 130203, 130204, 130205, 130206, 130207, 130208, 130209, 130221, 130222, 130223, 130224,\n    130225, 130226, 130227, 130228, 130229, 130230, 130281, 130282, 130283, 130301, 130302, 130303, 130304, 130305, 130306, 130321, 130322, 130323, 130324, 130401, 130402, 130403, 130404, 130405, 130406, 130407, 130408,\n    130421, 130422, 130423, 130424, 130425, 130426, 130427, 130428, 130429, 130430, 130431, 130432, 130433, 130434, 130435, 130481, 130501, 130502, 130503, 130504, 130521, 130522, 130523, 130524, 130525, 130526, 130527,\n    130528, 130529, 130530, 130531, 130532, 130533, 130534, 130535, 130581, 130582, 130601, 130602, 130603, 130604, 130605, 130606, 130607, 130608, 130609, 130621, 130622, 130623, 130624, 130625, 130626, 130627, 130628,\n    130629, 130630, 130631, 130632, 130633, 130634, 130635, 130636, 130637, 130638, 130681, 130682, 130683, 130684, 130701, 130702, 130703, 130704, 130705, 130706, 130707, 130708, 130709, 130721, 130722, 130723, 130724,\n    130725, 130726, 130727, 130728, 130729, 130730, 130731, 130732, 130733, 130801, 130802, 130803, 130804, 130821, 130822, 130823, 130824, 130825, 130826, 130827, 130828, 130881, 130901, 130902, 130903, 130904, 130921,\n    130922, 130923, 130924, 130925, 130926, 130927, 130928, 130929, 130930, 130981, 130982, 130983, 130984, 131001, 131002, 131003, 131021, 131022, 131023, 131024, 131025, 131026, 131027, 131028, 131081, 131082, 131101,\n    131102, 131103, 131121, 131122, 131123, 131124, 131125, 131126, 131127, 131128, 131181, 131182, 132101, 132102, 132103, 132104, 132105, 132106, 132121, 132122, 132123, 132124, 132125, 132126, 132127, 132128, 132129,\n    132130, 132131, 132132, 132133, 132134, 132135, 132201, 132202, 132203, 132204, 132221, 132222, 132223, 132224, 132225, 132226, 132227, 132228, 132229, 132230, 132231, 132232, 132233, 132234, 132235, 132236, 132237,\n    132301, 132302, 132303, 132304, 132321, 132322, 132323, 132324, 132325, 132326, 132327, 132328, 132329, 132330, 132331, 132332, 132333, 132334, 132335, 132336, 132337, 132401, 132402, 132403, 132404, 132405, 132421,\n    132422, 132423, 132424, 132425, 132426, 132427, 132428, 132429, 132430, 132431, 132432, 132433, 132434, 132435, 132436, 132437, 132438, 132439, 132440, 132441, 132442, 132501, 132502, 132503, 132504, 132505, 132506,\n    132507, 132521, 132522, 132523, 132524, 132525, 132526, 132527, 132528, 132529, 132530, 132531, 132532, 132533, 132601, 132602, 132603, 132604, 132621, 132622, 132623, 132624, 132625, 132626, 132627, 132628, 132629,\n    132701, 132702, 132703, 132704, 132705, 132721, 132722, 132723, 132724, 132725, 132726, 132727, 132728, 132729, 132730, 132731, 132732, 132733, 132801, 132821, 132822, 132823, 132824, 132825, 132826, 132827, 132828,\n    132829, 132901, 132902, 132903, 132904, 132905, 132921, 132922, 132923, 132924, 132925, 132926, 132927, 132928, 132929, 132930, 132931, 132932, 132933, 132934, 133001, 133002, 133003, 133021, 133022, 133023, 133024,\n    133025, 133026, 133027, 133028, 133029, 133030, 133031, 139001, 139002, 139003, 139004, 139005, 139006, 139007, 139008, 139009, 139010, 139011, 139012, 139013, 139014, 139015, 139016, 139017, 139018, 139019, 139020,\n    140101, 140102, 140103, 140104, 140105, 140106, 140107, 140108, 140109, 140110, 140111, 140112, 140113, 140121, 140122, 140123, 140181, 140201, 140202, 140203, 140211, 140212, 140221, 140222, 140223, 140224, 140225,\n    140226, 140227, 140301, 140302, 140303, 140311, 140321, 140322, 140401, 140402, 140411, 140421, 140422, 140423, 140424, 140425, 140426, 140427, 140428, 140429, 140430, 140431, 140481, 140501, 140502, 140503, 140521,\n    140522, 140523, 140524, 140525, 140581, 140601, 140602, 140603, 140621, 140622, 140623, 140624, 140701, 140702, 140721, 140722, 140723, 140724, 140725, 140726, 140727, 140728, 140729, 140781, 140801, 140802, 140821,\n    140822, 140823, 140824, 140825, 140826, 140827, 140828, 140829, 140830, 140881, 140882, 140901, 140902, 140921, 140922, 140923, 140924, 140925, 140926, 140927, 140928, 140929, 140930, 140931, 140932, 140981, 141001,\n    141002, 141021, 141022, 141023, 141024, 141025, 141026, 141027, 141028, 141029, 141030, 141031, 141032, 141033, 141034, 141081, 141082, 141101, 141102, 141121, 141122, 141123, 141124, 141125, 141126, 141127, 141128,\n    141129, 141130, 141181, 141182, 142101, 142121, 142122, 142123, 142124, 142125, 142126, 142127, 142128, 142129, 142130, 142131, 142132, 142133, 142201, 142202, 142221, 142222, 142223, 142224, 142225, 142226, 142227,\n    142228, 142229, 142230, 142231, 142232, 142233, 142234, 142301, 142302, 142303, 142321, 142322, 142323, 142324, 142325, 142326, 142327, 142328, 142329, 142330, 142331, 142332, 142333, 142401, 142402, 142421, 142422,\n    142423, 142424, 142425, 142426, 142427, 142428, 142429, 142430, 142431, 142432, 142433, 142501, 142521, 142522, 142523, 142524, 142525, 142526, 142527, 142528, 142529, 142530, 142531, 142532, 142533, 142534, 142535,\n    142536, 142601, 142602, 142603, 142621, 142622, 142623, 142624, 142625, 142626, 142627, 142628, 142629, 142630, 142631, 142632, 142633, 142634, 142635, 142636, 142701, 142702, 142703, 142721, 142722, 142723, 142724,\n    142725, 142726, 142727, 142728, 142729, 142730, 142731, 142732, 142733, 149001, 149002, 149003, 150101, 150102, 150103, 150104, 150105, 150121, 150122, 150123, 150124, 150125, 150201, 150202, 150203, 150204, 150205,\n    150206, 150207, 150221, 150222, 150223, 150301, 150302, 150303, 150304, 150401, 150402, 150403, 150404, 150421, 150422, 150423, 150424, 150425, 150426, 150428, 150429, 150430, 150501, 150502, 150521, 150522, 150523,\n    150524, 150525, 150526, 150581, 150601, 150602, 150603, 150621, 150622, 150623, 150624, 150625, 150626, 150627, 150701, 150702, 150703, 150721, 150722, 150723, 150724, 150725, 150726, 150727, 150781, 150782, 150783,\n    150784, 150785, 150801, 150802, 150821, 150822, 150823, 150824, 150825, 150826, 150901, 150902, 150921, 150922, 150923, 150924, 150925, 150926, 150927, 150928, 150929, 150981, 152101, 152102, 152103, 152104, 152105,\n    152106, 152121, 152122, 152123, 152124, 152125, 152126, 152127, 152128, 152129, 152130, 152131, 152201, 152202, 152221, 152222, 152223, 152224, 152301, 152302, 152321, 152322, 152323, 152324, 152325, 152326, 152327,\n    152401, 152421, 152422, 152423, 152424, 152425, 152426, 152427, 152428, 152429, 152430, 152431, 152501, 152502, 152521, 152522, 152523, 152524, 152525, 152526, 152527, 152528, 152529, 152530, 152531, 152601, 152602,\n    152621, 152622, 152623, 152624, 152625, 152626, 152627, 152628, 152629, 152630, 152631, 152632, 152633, 152634, 152701, 152721, 152722, 152723,\n    152724, 152725, 152726, 152727, 152728, 152801, 152821, 152822, 152823,\n    152824, 152825, 152826, 152827, 152828, 152829, 152830, 152831, 152832,\n    152833, 152834, 152901, 152921, 152922, 152923, 210101, 210102, 210103,\n    210104, 210105, 210106, 210111, 210112, 210113, 210114, 210115, 210121,\n    210122, 210123, 210124, 210181, 210201, 210202, 210203, 210204, 210211,\n    210212, 210213, 210214, 210219, 210221, 210222, 210223, 210224, 210225,\n    210281, 210282, 210283, 210301, 210302, 210303, 210304, 210311, 210319,\n    210321, 210322, 210323, 210381, 210401, 210402, 210403, 210404, 210411,\n    210421, 210422, 210423, 210501, 210502, 210503, 210504, 210505, 210511,\n    210521, 210522, 210601, 210602, 210603, 210604, 210621, 210622, 210623,\n    210624, 210681, 210682, 210701, 210702, 210703, 210704, 210705, 210706,\n    210711, 210719, 210721, 210722, 210723, 210724, 210725, 210726, 210727,\n    210781, 210782, 210801, 210802, 210803, 210804, 210811, 210821, 210822,\n    210823, 210824, 210881, 210882, 210901, 210902, 210903, 210904, 210905,\n    210911, 210921, 210922, 211001, 211002, 211003, 211004, 211005, 211011,\n    211021, 211022, 211081, 211101, 211102, 211103, 211104, 211111, 211121,\n    211122, 211201, 211202, 211203, 211204, 211221, 211222, 211223, 211224,\n    211225, 211226, 211281, 211282, 211301, 211302, 211303, 211319, 211321,\n    211322, 211323, 211324, 211325, 211326, 211381, 211382, 211401, 211402,\n    211403, 211404, 211405, 211421, 211422, 211481, 212101, 212102, 212121,\n    212122, 212123, 212124, 212125, 212126, 212201, 212221, 212222, 212223,\n    212224, 212225, 212226, 219001, 219002, 219003, 219004, 219005, 219006,\n    219007, 219008, 219009, 219010, 219011, 219012, 219013, 219014, 219015,\n    219016, 220101, 220102, 220103, 220104, 220105, 220106, 220111, 220112,\n    220113, 220121, 220122, 220123, 220124, 220125, 220181, 220182, 220183,\n    220201, 220202, 220203, 220204, 220211, 220221, 220222, 220223, 220224,\n    220225, 220281, 220282, 220283, 220284, 220301, 220302, 220303, 220319,\n    220321, 220322, 220323, 220324, 220381, 220382, 220401, 220402, 220403,\n    220421, 220422, 220501, 220502, 220503, 220519, 220521, 220522, 220523,\n    220524, 220581, 220582, 220601, 220602, 220603, 220604, 220605, 220621,\n    220622, 220623, 220624, 220625, 220681, 220701, 220702, 220721, 220722,\n    220723, 220724, 220781, 220801, 220802, 220821, 220822, 220881, 220882,\n    222101, 222102, 222121, 222122, 222123, 222124, 222125, 222201, 222202,\n    222221, 222222, 222223, 222224, 222225, 222226, 222227, 222228, 222301,\n    222302, 222303, 222304, 222321, 222322, 222323, 222324, 222325, 222326,\n    222327, 222328, 222401, 222402, 222403, 222404, 222405, 222406, 222421,\n    222422, 222423, 222424, 222425, 222426, 222427, 222501, 222521, 222522,\n    222523, 222524, 222525, 222601, 222621, 222622, 222623, 222624, 222625,\n    229001, 229002, 229003, 229004, 229005, 229006, 229007, 229008, 229009,\n    229010, 229011, 229012, 230101, 230102, 230103, 230104, 230105, 230106,\n    230107, 230108, 230109, 230110, 230111, 230112, 230113, 230121, 230122,\n    230123, 230124, 230125, 230126, 230127, 230128, 230129, 230181, 230182,\n    230183, 230184, 230201, 230202, 230203, 230204, 230205, 230206, 230207,\n    230208, 230221, 230222, 230223, 230224, 230225, 230226, 230227, 230228,\n    230229, 230230, 230231, 230281, 230301, 230302, 230303, 230304, 230305,\n    230306, 230307, 230321, 230322, 230381, 230382, 230401, 230402, 230403,\n    230404, 230405, 230406, 230407, 230421, 230422, 230501, 230502, 230503,\n    230504, 230505, 230506, 230507, 230521, 230522, 230523, 230524, 230601,\n    230602, 230603, 230604, 230605, 230606, 230621, 230622, 230623, 230624,\n    230701, 230702, 230703, 230704, 230705, 230706, 230707, 230708, 230709,\n    230710, 230711, 230712, 230713, 230714, 230715, 230716, 230721, 230722,\n    230781, 230801, 230802, 230803, 230804, 230805, 230811, 230821, 230822,\n    230823, 230824, 230825, 230826, 230827, 230828, 230829, 230830, 230831,\n    230832, 230833, 230881, 230882, 230883, 230901, 230902, 230903, 230904,\n    230921, 231001, 231002, 231003, 231004, 231005, 231006, 231007, 231011,\n    231020, 231021, 231022, 231023, 231024, 231025, 231026, 231027, 231081,\n    231083, 231084, 231085, 231086, 231101, 231102, 231121, 231122, 231123,\n    231124, 231181, 231182, 231201, 231202, 231221, 231222, 231223, 231224,\n    231225, 231226, 231281, 231282, 231283, 232101, 232102, 232103, 232121,\n    232122, 232123, 232124, 232125, 232126, 232127, 232128, 232129, 232130,\n    232131, 232132, 232201, 232221, 232222, 232223, 232224, 232225, 232226,\n    232227, 232228, 232229, 232230, 232231, 232301, 232302, 232303, 232304,\n    232321, 232322, 232323, 232324, 232325, 232326, 232327, 232328, 232329,\n    232330, 232331, 232332, 232401, 232402, 232403, 232404, 232405, 232406,\n    232411, 232421, 232422, 232423, 232424, 232425, 232426, 232427, 232428,\n    232429, 232430, 232431, 232432, 232433, 232501, 232502, 232503, 232504,\n    232505, 232506, 232511, 232521, 232522, 232523, 232524, 232525, 232526,\n    232527, 232528, 232581, 232601, 232602, 232603, 232621, 232622, 232623,\n    232624, 232625, 232626, 232627, 232701, 232721, 232722, 232723, 239001,\n    239002, 239003, 239004, 239005, 239006, 239007, 239008, 239009, 239010,\n    239011, 310101, 310102, 310103, 310104, 310105, 310106, 310107, 310108,\n    310109, 310110, 310111, 310112, 310113, 310114, 310115, 310116, 310117,\n    310118, 310119, 310120, 310151, 310201, 310202, 310203, 310204, 310205,\n    310206, 310207, 310208, 310209, 310210, 310221, 310222, 310223, 310224,\n    310225, 310226, 310227, 310228, 310229, 310230, 320101, 320102, 320103,\n    320104, 320105, 320106, 320107, 320111, 320112, 320113, 320114, 320115,\n    320116, 320117, 320118, 320121, 320122, 320123, 320124, 320125, 320201,\n    320202, 320203, 320204, 320205, 320206, 320211, 320213, 320214, 320221,\n    320222, 320223, 320281, 320282, 320283, 320301, 320302, 320303, 320304,\n    320305, 320311, 320312, 320321, 320322, 320323, 320324, 320325, 320326,\n    320381, 320382, 320401, 320402, 320403, 320404, 320405, 320411, 320412,\n    320413, 320421, 320422, 320423, 320481, 320482, 320483, 320501, 320502,\n    320503, 320504, 320505, 320506, 320507, 320508, 320509, 320511, 320521,\n    320522, 320523, 320524, 320525, 320581, 320582, 320583, 320584, 320585,\n    320586, 320601, 320602, 320603, 320611, 320612, 320621, 320622, 320623,\n    320624, 320625, 320626, 320681, 320682, 320683, 320684, 320701, 320702,\n    320703, 320704, 320705, 320706, 320707, 320711, 320721, 320722, 320723,\n    320724, 320801, 320802, 320803, 320804, 320811, 320812, 320813, 320821,\n    320822, 320823, 320824, 320825, 320826, 320827, 320828, 320829, 320830,\n    320831, 320881, 320882, 320901, 320902, 320903, 320904, 320911, 320921,\n    320922, 320923, 320924, 320925, 320926, 320927, 320928, 320981, 320982,\n    321001, 321002, 321003, 321011, 321012, 321021, 321022, 321023, 321024,\n    321025, 321026, 321027, 321028, 321029, 321081, 321082, 321083, 321084,\n    321085, 321086, 321087, 321088, 321101, 321102, 321111, 321112, 321121,\n    321122, 321123, 321124, 321181, 321182, 321183, 321201, 321202, 321203,\n    321204, 321281, 321282, 321283, 321284, 321301, 321302, 321311, 321321,\n    321322, 321323, 321324, 322101, 322121, 322122, 322123, 322124, 322125,\n    322126, 322127, 322128, 322201, 322221, 322222, 322223, 322224, 322225,\n    322226, 322227, 322228, 322229, 322230, 322231, 322232, 322301, 322321,\n    322322, 322323, 322324, 322325, 322326, 322327, 322328, 322401, 322402,\n    322421, 322422, 322423, 322424, 322425, 322426, 322427, 322428, 322429,\n    322501, 322521, 322522, 322523, 322524, 322525, 322526, 322601, 322621,\n    322622, 322623, 322624, 322625, 322626, 322627, 322628, 322629, 322630,\n    322701, 322721, 322722, 322723, 322724, 322725, 322726, 322727, 322728,\n    329001, 329002, 329003, 329004, 329005, 329006, 329007, 329008, 329009,\n    329010, 329011, 329012, 329013, 329014, 329015, 329016, 329017, 329018,\n    329019, 329020, 329021, 329022, 329023, 329024, 329025, 329026, 329027,\n    329028, 330101, 330102, 330103, 330104, 330105, 330106, 330107, 330108,\n    330109, 330110, 330111, 330112, 330121, 330122, 330123, 330124, 330125,\n    330126, 330127, 330181, 330182, 330183, 330184, 330185, 330201, 330202,\n    330203, 330204, 330205, 330206, 330211, 330212, 330213, 330219, 330221,\n    330222, 330223, 330224, 330225, 330226, 330227, 330281, 330282, 330283,\n    330301, 330302, 330303, 330304, 330305, 330321, 330322, 330323, 330324,\n    330325, 330326, 330327, 330328, 330329, 330381, 330382, 330401, 330402,\n    330411, 330421, 330422, 330423, 330424, 330425, 330481, 330482, 330483,\n    330501, 330502, 330503, 330511, 330521, 330522, 330523, 330601, 330602,\n    330603, 330604, 330621, 330622, 330623, 330624, 330625, 330681, 330682,\n    330683, 330701, 330702, 330703, 330721, 330722, 330723, 330724, 330725,\n    330726, 330727, 330781, 330782, 330783, 330784, 330801, 330802, 330803,\n    330821, 330822, 330823, 330824, 330825, 330881, 330901, 330902, 330903,\n    330921, 330922, 331001, 331002, 331003, 331004, 331021, 331022, 331023,\n    331024, 331081, 331082, 331083, 331101, 331102, 331121, 331122, 331123,\n    331124, 331125, 331126, 331127, 331181, 332101, 332102, 332121, 332122,\n    332123, 332124, 332125, 332126, 332127, 332128, 332129, 332130, 332201,\n    332221, 332222, 332223, 332224, 332225, 332226, 332227, 332301, 332321,\n    332322, 332323, 332324, 332325, 332401, 332402, 332421, 332422, 332423,\n    332424, 332425, 332426, 332427, 332428, 332429, 332430, 332431, 332501,\n    332502, 332521, 332522, 332523, 332524, 332525, 332526, 332527, 332528,\n    332529, 332530, 332531, 332581, 332582, 332601, 332602, 332603, 332621,\n    332622, 332623, 332624, 332625, 332626, 332627, 332701, 332721, 332722,\n    332723, 332724, 332725, 332726, 332727, 332801, 332821, 332822, 332823,\n    332824, 339001, 339002, 339003, 339004, 339005, 339006, 339007, 339008,\n    339009, 339010, 339011, 339012, 339013, 339014, 339015, 339016, 339017,\n    339018, 339019, 339020, 339021, 340101, 340102, 340103, 340104, 340111,\n    340121, 340122, 340123, 340124, 340181, 340201, 340202, 340203, 340204,\n    340205, 340206, 340207, 340208, 340211, 340221, 340222, 340223, 340224,\n    340225, 340301, 340302, 340303, 340304, 340311, 340321, 340322, 340323,\n    340401, 340402, 340403, 340404, 340405, 340406, 340421, 340422, 340501,\n    340502, 340503, 340504, 340505, 340506, 340511, 340521, 340522, 340523,\n    340601, 340602, 340603, 340604, 340611, 340621, 340701, 340702, 340703,\n    340704, 340705, 340706, 340711, 340721, 340722, 340801, 340802, 340803,\n    340811, 340821, 340822, 340823, 340824, 340825, 340826, 340827, 340828,\n    340881, 340901, 341001, 341002, 341003, 341004, 341021, 341022, 341023,\n    341024, 341101, 341102, 341103, 341121, 341122, 341124, 341125, 341126,\n    341127, 341181, 341182, 341201, 341202, 341203, 341204, 341221, 341222,\n    341223, 341224, 341225, 341226, 341227, 341281, 341282, 341301, 341302,\n    341321, 341322, 341323, 341324, 341401, 341402, 341421, 341422, 341423,\n    341424, 341501, 341502, 341503, 341504, 341521, 341522, 341523, 341524,\n    341525, 341601, 341602, 341621, 341622, 341623, 341701, 341702, 341721,\n    341722, 341723, 341801, 341802, 341821, 341822, 341823, 341824, 341825,\n    341881, 342101, 342102, 342103, 342121, 342122, 342123, 342124, 342125,\n    342126, 342127, 342128, 342129, 342130, 342201, 342221, 342222, 342223,\n    342224, 342225, 342226, 342227, 342228, 342301, 342321, 342322, 342323,\n    342324, 342325, 342326, 342327, 342401, 342421, 342422, 342423, 342424,\n    342425, 342426, 342427, 342501, 342502, 342521, 342522, 342523, 342524,\n    342525, 342526, 342527, 342528, 342529, 342530, 342531, 342601, 342621,\n    342622, 342623, 342624, 342625, 342626, 342701, 342721, 342722, 342723,\n    342724, 342725, 342726, 342727, 342728, 342801, 342821, 342822, 342823,\n    342824, 342825, 342826, 342827, 342828, 342829, 342830, 342831, 342901,\n    342921, 342922, 342923, 349001, 349002, 350101, 350102, 350103, 350104,\n    350105, 350111, 350112, 350121, 350122, 350123, 350124, 350125, 350126,\n    350127, 350128, 350181, 350182, 350201, 350202, 350203, 350204, 350205,\n    350206, 350211, 350212, 350213, 350221, 350301, 350302, 350303, 350304,\n    350305, 350321, 350322, 350401, 350402, 350403, 350420, 350421, 350422,\n    350423, 350424, 350425, 350426, 350427, 350428, 350429, 350430, 350481,\n    350501, 350502, 350503, 350504, 350505, 350521, 350522, 350523, 350524,\n    350525, 350526, 350527, 350581, 350582, 350583, 350601, 350602, 350603,\n    350621, 350622, 350623, 350624, 350625, 350626, 350627, 350628, 350629,\n    350681, 350701, 350702, 350703, 350721, 350722, 350723, 350724, 350725,\n    350781, 350782, 350783, 350784, 350801, 350802, 350803, 350821, 350822,\n    350823, 350824, 350825, 350881, 350901, 350902, 350921, 350922, 350923,\n    350924, 350925, 350926, 350981, 350982, 352101, 352102, 352103, 352104,\n    352121, 352122, 352123, 352124, 352125, 352126, 352127, 352128, 352129,\n    352201, 352202, 352203, 352221, 352222, 352223, 352224, 352225, 352226,\n    352227, 352228, 352229, 352230, 352231, 352301, 352321, 352322, 352323,\n    352324, 352325, 352326, 352327, 352328, 352329, 352330, 352331, 352401,\n    352421, 352422, 352423, 352424, 352425, 352426, 352427, 352501, 352521,\n    352522, 352523, 352524, 352525, 352526, 352527, 352528, 352529, 352601,\n    352602, 352621, 352622, 352623, 352624, 352625, 352626, 352627, 352628,\n    352629, 352701, 352721, 352722, 352723, 352724, 352725, 352726, 352727,\n    352728, 352729, 352730, 352801, 352821, 352822, 352823, 352824, 352825,\n    352826, 352827, 352828, 352829, 352830, 359001, 359002, 359003, 359004,\n    359005, 359006, 359007, 359008, 359009, 359010, 359011, 360101, 360102,\n    360103, 360104, 360105, 360111, 360112, 360121, 360122, 360123, 360124,\n    360201, 360202, 360203, 360211, 360212, 360221, 360222, 360281, 360301,\n    360302, 360311, 360312, 360313, 360321, 360322, 360323, 360401, 360402,\n    360403, 360404, 360411, 360421, 360422, 360423, 360424, 360425, 360426,\n    360427, 360428, 360429, 360430, 360481, 360482, 360483, 360501, 360502,\n    360521, 360601, 360602, 360621, 360622, 360681, 360701, 360702, 360703,\n    360704, 360721, 360722, 360723, 360724, 360725, 360726, 360727, 360728,\n    360729, 360730, 360731, 360732, 360733, 360734, 360735, 360781, 360782,\n    360801, 360802, 360803, 360821, 360822, 360823, 360824, 360825, 360826,\n    360827, 360828, 360829, 360830, 360881, 360901, 360902, 360921, 360922,\n    360923, 360924, 360925, 360926, 360981, 360982, 360983, 361001, 361002,\n    361003, 361021, 361022, 361023, 361024, 361025, 361026, 361027, 361028,\n    361029, 361030, 361101, 361102, 361103, 361121, 361122, 361123, 361124,\n    361125, 361126, 361127, 361128, 361129, 361130, 361181, 362101, 362102,\n    362103, 362121, 362122, 362123, 362124, 362125, 362126, 362127, 362128,\n    362129, 362130, 362131, 362132, 362133, 362134, 362135, 362136, 362137,\n    362138, 362201, 362202, 362203, 362204, 362221, 362222, 362223, 362224,\n    362225, 362226, 362227, 362228, 362229, 362230, 362231, 362232, 362233,\n    362234, 362301, 362302, 362321, 362322, 362323, 362324, 362325, 362326,\n    362327, 362328, 362329, 362330, 362331, 362332, 362333, 362334, 362401,\n    362402, 362421, 362422, 362423, 362424, 362425, 362426, 362427, 362428,\n    362429, 362430, 362431, 362432, 362433, 362501, 362521, 362522, 362523,\n    362524, 362525, 362526, 362527, 362528, 362529, 362530, 362531, 362532,\n    362533, 362601, 362621, 362622, 362623, 362624, 362625, 362626, 362627,\n    362628, 362629, 362630, 362631, 362632, 362633, 362634, 362635, 362636,\n    362637, 362638, 369001, 369002, 370101, 370102, 370103, 370104, 370105,\n    370111, 370112, 370113, 370114, 370121, 370122, 370123, 370124, 370125,\n    370126, 370181, 370201, 370202, 370203, 370204, 370205, 370206, 370211,\n    370212, 370213, 370214, 370215, 370221, 370222, 370223, 370224, 370225,\n    370226, 370281, 370282, 370283, 370284, 370285, 370301, 370302, 370303,\n    370304, 370305, 370306, 370321, 370322, 370323, 370401, 370402, 370403,\n    370404, 370405, 370406, 370421, 370481, 370501, 370502, 370503, 370504,\n    370505, 370521, 370522, 370523, 370601, 370602, 370611, 370612, 370613,\n    370620, 370622, 370623, 370624, 370625, 370627, 370628, 370629, 370630,\n    370631, 370632, 370633, 370634, 370681, 370682, 370683, 370684, 370685,\n    370686, 370687, 370701, 370702, 370703, 370704, 370705, 370721, 370722,\n    370723, 370724, 370725, 370726, 370727, 370728, 370729, 370781, 370782,\n    370783, 370784, 370785, 370786, 370801, 370802, 370811, 370812, 370822,\n    370823, 370825, 370826, 370827, 370828, 370829, 370830, 370831, 370832,\n    370881, 370882, 370883, 370901, 370902, 370911, 370921, 370922, 370923,\n    370981, 370982, 370983, 371001, 371002, 371003, 371021, 371022, 371023,\n    371081, 371082, 371083, 371101, 371102, 371103, 371121, 371122, 371201,\n    371202, 371203, 371301, 371302, 371311, 371312, 371321, 371322, 371323,\n    371324, 371325, 371326, 371327, 371328, 371329, 371401, 371402, 371403,\n    371421, 371422, 371423, 371424, 371425, 371426, 371427, 371428, 371481,\n    371482, 371501, 371502, 371521, 371522, 371523, 371524, 371525, 371526,\n    371581, 371601, 371602, 371603, 371621, 371622, 371623, 371624, 371625,\n    371626, 371701, 371702, 371703, 371721, 371722, 371723, 371724, 371725,\n    371726, 371727, 371728, 372101, 372102, 372121, 372122, 372123, 372124,\n    372125, 372126, 372127, 372128, 372129, 372130, 372131, 372132, 372133,\n    372134, 372201, 372221, 372222, 372223, 372224, 372225, 372226, 372227,\n    372228, 372229, 372230, 372231, 372301, 372321, 372322, 372323, 372324,\n    372325, 372326, 372327, 372328, 372329, 372330, 372331, 372332, 372401,\n    372402, 372403, 372421, 372422, 372423, 372424, 372425, 372426, 372427,\n    372428, 372429, 372430, 372431, 372432, 372501, 372502, 372521, 372522,\n    372523, 372524, 372525, 372526, 372527, 372528, 372601, 372602, 372603,\n    372621, 372622, 372623, 372624, 372625, 372626, 372627, 372628, 372629,\n    372630, 372701, 372721, 372722, 372723, 372724, 372725, 372726, 372727,\n    372728, 372729, 372730, 372801, 372821, 372822, 372823, 372824, 372825,\n    372826, 372827, 372828, 372829, 372830, 372831, 372832, 372833, 372901,\n    372921, 372922, 372923, 372924, 372925, 372926, 372927, 372928, 372929,\n    372930, 379001, 379002, 379003, 379004, 379005, 379006, 379007, 379008,\n    379009, 379010, 379011, 379012, 379013, 379014, 379015, 379016, 379017,\n    379018, 379019, 379020, 379021, 379022, 379023, 379024, 379025, 379026,\n    379027, 379028, 379029, 410101, 410102, 410103, 410104, 410105, 410106,\n    410107, 410108, 410111, 410112, 410121, 410122, 410123, 410124, 410125,\n    410126, 410181, 410182, 410183, 410184, 410185, 410201, 410202, 410203,\n    410204, 410205, 410211, 410212, 410221, 410222, 410223, 410224, 410225,\n    410301, 410302, 410303, 410304, 410305, 410306, 410311, 410321, 410322,\n    410323, 410324, 410325, 410326, 410327, 410328, 410329, 410381, 410401,\n    410402, 410403, 410404, 410411, 410412, 410421, 410422, 410423, 410424,\n    410425, 410426, 410481, 410482, 410501, 410502, 410503, 410504, 410505,\n    410506, 410511, 410521, 410522, 410523, 410524, 410525, 410526, 410527,\n    410581, 410601, 410602, 410603, 410604, 410611, 410621, 410622, 410701,\n    410702, 410703, 410704, 410711, 410721, 410722, 410723, 410724, 410725,\n    410726, 410727, 410728, 410781, 410782, 410801, 410802, 410803, 410804,\n    410811, 410821, 410822, 410823, 410824, 410825, 410826, 410827, 410881,\n    410882, 410883, 410901, 410902, 410911, 410921, 410922, 410923, 410924,\n    410925, 410926, 410927, 410928, 411001, 411002, 411003, 411021, 411022,\n    411023, 411024, 411025, 411081, 411082, 411101, 411102, 411103, 411104,\n    411121, 411122, 411123, 411201, 411202, 411203, 411221, 411222, 411223,\n    411224, 411281, 411282, 411301, 411302, 411303, 411321, 411322, 411323,\n    411324, 411325, 411326, 411327, 411328, 411329, 411330, 411381, 411401,\n    411402, 411403, 411421, 411422, 411423, 411424, 411425, 411426, 411481,\n    411501, 411502, 411503, 411521, 411522, 411523, 411524, 411525, 411526,\n    411527, 411528, 411601, 411602, 411621, 411622, 411623, 411624, 411625,\n    411626, 411627, 411628, 411681, 411701, 411702, 411721, 411722, 411723,\n    411724, 411725, 411726, 411727, 411728, 411729, 412101, 412102, 412103,\n    412104, 412111, 412121, 412122, 412123, 412124, 412125, 412126, 412127,\n    412128, 412129, 412130, 412131, 412132, 412133, 412201, 412202, 412203,\n    412204, 412211, 412221, 412222, 412223, 412224, 412225, 412226, 412227,\n    412228, 412229, 412230, 412231, 412232, 412233, 412234, 412301, 412302,\n    412321, 412322, 412323, 412324, 412325, 412326, 412327, 412328, 412401,\n    412421, 412422, 412423, 412424, 412425, 412426, 412427, 412428, 412429,\n    412430, 412501, 412502, 412521, 412522, 412523, 412524, 412525, 412526,\n    412527, 412528, 412529, 412530, 412531, 412532, 412533, 412534, 412601,\n    412602, 412621, 412622, 412623, 412624, 412625, 412626, 412627, 412628,\n    412629, 412630, 412631, 412632, 412701, 412702, 412721, 412722, 412723,\n    412724, 412725, 412726, 412727, 412728, 412729, 412801, 412821, 412822,\n    412823, 412824, 412825, 412826, 412827, 412828, 412829, 412901, 412902,\n    412921, 412922, 412923, 412924, 412925, 412926, 412927, 412928, 412929,\n    412930, 412931, 412932, 413001, 413021, 413022, 413023, 413024, 413025,\n    413026, 413027, 413028, 413029, 419001, 419002, 419003, 419004, 419005,\n    419006, 419007, 419008, 419009, 419010, 419011, 419012, 419013, 419014,\n    419015, 419016, 419017, 419018, 420101, 420102, 420103, 420104, 420105,\n    420106, 420107, 420111, 420112, 420113, 420114, 420115, 420116, 420117,\n    420121, 420122, 420123, 420124, 420201, 420202, 420203, 420204, 420205,\n    420211, 420221, 420222, 420281, 420301, 420302, 420303, 420304, 420321,\n    420322, 420323, 420324, 420325, 420381, 420401, 420501, 420502, 420503,\n    420504, 420505, 420506, 420521, 420523, 420525, 420526, 420527, 420528,\n    420529, 420581, 420582, 420583, 420601, 420602, 420603, 420604, 420606,\n    420607, 420611, 420621, 420622, 420623, 420624, 420625, 420626, 420682,\n    420683, 420684, 420701, 420702, 420703, 420704, 420801, 420802, 420803,\n    420804, 420821, 420822, 420881, 420901, 420902, 420921, 420922, 420923,\n    420924, 420981, 420982, 420983, 420984, 421001, 421002, 421003, 421004,\n    421022, 421023, 421024, 421025, 421081, 421082, 421083, 421087, 421101,\n    421102, 421121, 421122, 421123, 421124, 421125, 421126, 421127, 421181,\n    421182, 421201, 421202, 421221, 421222, 421223, 421224, 421281, 421301,\n    421303, 421321, 421381, 422101, 422102, 422103, 422121, 422122, 422123,\n    422124, 422125, 422126, 422127, 422128, 422129, 422130, 422131, 422201,\n    422202, 422203, 422204, 422221, 422222, 422223, 422224, 422225, 422226,\n    422227, 422228, 422301, 422302, 422321, 422322, 422323, 422324, 422325,\n    422326, 422327, 422401, 422402, 422403, 422404, 422405, 422406, 422421,\n    422422, 422423, 422424, 422425, 422426, 422427, 422428, 422429, 422430,\n    422431, 422432, 422501, 422502, 422521, 422522, 422523, 422524, 422525,\n    422526, 422527, 422528, 422601, 422621, 422622, 422623, 422624, 422625,\n    422626, 422627, 422701, 422702, 422721, 422722, 422723, 422724, 422725,\n    422726, 422727, 422728, 422729, 422801, 422802, 422821, 422822, 422823,\n    422824, 422825, 422826, 422827, 422828, 422921, 429001, 429002, 429003,\n    429004, 429005, 429006, 429007, 429008, 429009, 429010, 429011, 429012,\n    429013, 429014, 429015, 429016, 429017, 429021, 430101, 430102, 430103,\n    430104, 430105, 430111, 430112, 430121, 430122, 430123, 430124, 430181,\n    430182, 430201, 430202, 430203, 430204, 430211, 430219, 430221, 430222,\n    430223, 430224, 430225, 430281, 430301, 430302, 430303, 430304, 430305,\n    430306, 430311, 430321, 430322, 430381, 430382, 430401, 430402, 430403,\n    430404, 430405, 430406, 430407, 430408, 430411, 430412, 430421, 430422,\n    430423, 430424, 430425, 430426, 430427, 430481, 430482, 430501, 430502,\n    430503, 430504, 430511, 430521, 430522, 430523, 430524, 430525, 430526,\n    430527, 430528, 430529, 430581, 430601, 430602, 430603, 430611, 430621,\n    430622, 430623, 430624, 430626, 430627, 430681, 430682, 430701, 430702,\n    430703, 430721, 430722, 430723, 430724, 430725, 430726, 430781, 430801,\n    430802, 430811, 430821, 430822, 430901, 430902, 430903, 430921, 430922,\n    430923, 430981, 431001, 431002, 431003, 431021, 431022, 431023, 431024,\n    431025, 431026, 431027, 431028, 431081, 431101, 431102, 431103, 431121,\n    431122, 431123, 431124, 431125, 431126, 431127, 431128, 431129, 431201,\n    431202, 431221, 431222, 431223, 431224, 431225, 431226, 431227, 431228,\n    431229, 431230, 431281, 431301, 431302, 431321, 431322, 431381, 431382,\n    432101, 432121, 432122, 432123, 432124, 432125, 432126, 432127, 432201,\n    432221, 432222, 432223, 432224, 432225, 432226, 432301, 432302, 432321,\n    432322, 432323, 432324, 432325, 432326, 432401, 432402, 432421, 432422,\n    432423, 432424, 432425, 432426, 432427, 432428, 432501, 432502, 432503,\n    432521, 432522, 432523, 432524, 432525, 432601, 432621, 432622, 432623,\n    432624, 432625, 432626, 432627, 432701, 432721, 432722, 432723, 432724,\n    432725, 432726, 432727, 432801, 432802, 432821, 432822, 432823, 432824,\n    432825, 432826, 432827, 432828, 432829, 432830, 432831, 432901, 432902,\n    432921, 432922, 432923, 432924, 432925, 432926, 432927, 432928, 432929,\n    432930, 433001, 433002, 433021, 433022, 433023, 433024, 433025, 433026,\n    433027, 433028, 433029, 433030, 433031, 433101, 433102, 433121, 433122,\n    433123, 433124, 433125, 433126, 433127, 433128, 433129, 433130, 439001,\n    439002, 439003, 439004, 439005, 439006, 439007, 439008, 439009, 439010,\n    439011, 440101, 440102, 440103, 440104, 440105, 440106, 440107, 440111,\n    440112, 440113, 440114, 440115, 440116, 440117, 440118, 440121, 440122,\n    440123, 440124, 440125, 440126, 440127, 440128, 440181, 440182, 440183,\n    440184, 440201, 440202, 440203, 440204, 440205, 440221, 440222, 440223,\n    440224, 440225, 440226, 440227, 440228, 440229, 440230, 440231, 440232,\n    440233, 440281, 440282, 440301, 440303, 440304, 440305, 440306, 440307,\n    440308, 440309, 440310, 440321, 440401, 440402, 440403, 440404, 440421,\n    440501, 440502, 440503, 440504, 440505, 440506, 440507, 440508, 440509,\n    440510, 440511, 440512, 440513, 440514, 440515, 440521, 440522, 440523,\n    440524, 440525, 440526, 440527, 440528, 440582, 440583, 440601, 440602,\n    440603, 440604, 440605, 440606, 440607, 440608, 440620, 440621, 440622,\n    440623, 440624, 440681, 440682, 440683, 440684, 440701, 440702, 440703,\n    440704, 440705, 440711, 440721, 440722, 440723, 440724, 440725, 440726,\n    440727, 440781, 440782, 440783, 440784, 440785, 440801, 440802, 440803,\n    440804, 440811, 440821, 440822, 440823, 440824, 440825, 440881, 440882,\n    440883, 440901, 440902, 440903, 440904, 440921, 440922, 440923, 440924,\n    440981, 440982, 440983, 441001, 441002, 441003, 441004, 441005, 441101,\n    441201, 441202, 441203, 441204, 441221, 441222, 441223, 441224, 441225,\n    441226, 441227, 441228, 441229, 441230, 441283, 441284, 441301, 441302,\n    441303, 441321, 441322, 441323, 441324, 441381, 441401, 441402, 441403,\n    441421, 441422, 441423, 441424, 441425, 441426, 441427, 441481, 441501,\n    441502, 441521, 441522, 441523, 441581, 441601, 441602, 441611, 441621,\n    441622, 441623, 441624, 441625, 441701, 441702, 441703, 441704, 441721,\n    441722, 441723, 441781, 441801, 441802, 441803, 441811, 441821, 441822,\n    441823, 441824, 441825, 441826, 441827, 441881, 441882, 441901, 442001,\n    442101, 442102, 442121, 442122, 442123, 442124, 442125, 442126, 442127,\n    442128, 442129, 442130, 442131, 442132, 442133, 442134, 442135, 442136,\n    442201, 442202, 442221, 442222, 442223, 442224, 442225, 442226, 442227,\n    442228, 442301, 442302, 442321, 442322, 442323, 442324, 442325, 442326,\n    442327, 442328, 442329, 442330, 442331, 442401, 442421, 442422, 442423,\n    442424, 442425, 442426, 442427, 442501, 442502, 442521, 442522, 442523,\n    442524, 442525, 442526, 442527, 442528, 442529, 442530, 442531, 442601,\n    442621, 442622, 442623, 442624, 442625, 442626, 442627, 442628, 442629,\n    442630, 442631, 442632, 442633, 442701, 442721, 442722, 442723, 442724,\n    442725, 442726, 442727, 442728, 442729, 442730, 442731, 442732, 442801,\n    442821, 442822, 442823, 442824, 442825, 442826, 442827, 442828, 442829,\n    442830, 442901, 442921, 442922, 442923, 442924, 442925, 442926, 442927,\n    442928, 442929, 442930, 442931, 445101, 445102, 445103, 445121, 445122,\n    445201, 445202, 445203, 445221, 445222, 445223, 445224, 445281, 445301,\n    445302, 445303, 445321, 445322, 445323, 445381, 449001, 449002, 449003,\n    449004, 449005, 449006, 449007, 449008, 449009, 449010, 449011, 449012,\n    449013, 449014, 449015, 449016, 449017, 449018, 449019, 449020, 449021,\n    449022, 449023, 449024, 449025, 449026, 449027, 449028, 449029, 449030,\n    449031, 450101, 450102, 450103, 450104, 450105, 450106, 450107, 450108,\n    450109, 450110, 450121, 450122, 450123, 450124, 450125, 450126, 450127,\n    450201, 450202, 450203, 450204, 450205, 450206, 450221, 450222, 450223,\n    450224, 450225, 450226, 450301, 450302, 450303, 450304, 450305, 450306,\n    450311, 450312, 450321, 450322, 450323, 450324, 450325, 450326, 450327,\n    450328, 450329, 450330, 450331, 450332, 450401, 450402, 450403, 450404,\n    450405, 450406, 450421, 450422, 450423, 450481, 450501, 450502, 450503,\n    450512, 450521, 450601, 450602, 450603, 450621, 450681, 450701, 450702,\n    450703, 450721, 450722, 450801, 450802, 450803, 450804, 450821, 450881,\n    450901, 450902, 450903, 450921, 450922, 450923, 450924, 450981, 451001,\n    451002, 451021, 451022, 451023, 451024, 451025, 451026, 451027, 451028,\n    451029, 451030, 451031, 451081, 451101, 451102, 451103, 451121, 451122,\n    451123, 451201, 451202, 451203, 451221, 451222, 451223, 451224, 451225,\n    451226, 451227, 451228, 451229, 451281, 451301, 451302, 451321, 451322,\n    451323, 451324, 451381, 451401, 451402, 451421, 451422, 451423, 451424,\n    451425, 451481, 452101, 452121, 452122, 452123, 452124, 452125, 452126,\n    452127, 452128, 452129, 452130, 452131, 452132, 452133, 452201, 452221,\n    452222, 452223, 452224, 452225, 452226, 452227, 452228, 452229, 452230,\n    452231, 452301, 452321, 452322, 452323, 452324, 452325, 452326, 452327,\n    452328, 452329, 452330, 452331, 452332, 452401, 452402, 452421, 452422,\n    452423, 452424, 452425, 452426, 452427, 452428, 452501, 452502, 452503,\n    452504, 452521, 452522, 452523, 452524, 452525, 452526, 452527, 452528,\n    452601, 452621, 452622, 452623, 452624, 452625, 452626, 452627, 452628,\n    452629, 452630, 452631, 452632, 452701, 452702, 452721, 452722, 452723,\n    452724, 452725, 452726, 452727, 452728, 452729, 452730, 452731, 452801,\n    452802, 452821, 452822, 452823, 452824, 452825, 452826, 460001, 460002,\n    460003, 460004, 460005, 460006, 460007, 460021, 460022, 460023, 460024,\n    460025, 460026, 460027, 460028, 460029, 460030, 460031, 460032, 460033,\n    460034, 460035, 460036, 460101, 460102, 460103, 460104, 460105, 460106,\n    460107, 460108, 460201, 460202, 460203, 460204, 460205, 460301, 460401,\n    469001, 469002, 469003, 469005, 469006, 469007, 469021, 469022, 469023,\n    469024, 469025, 469026, 469027, 469028, 469029, 469030, 500101, 500102,\n    500103, 500104, 500105, 500106, 500107, 500108, 500109, 500110, 500111,\n    500112, 500113, 500114, 500115, 500116, 500117, 500118, 500119, 500120,\n    500151, 500152, 500153, 500154, 500155, 500156, 500221, 500222, 500223,\n    500224, 500225, 500226, 500227, 500228, 500229, 500230, 500231, 500232,\n    500233, 500234, 500235, 500236, 500237, 500238, 500239, 500240, 500241,\n    500242, 500243, 500381, 500382, 500383, 500384, 510101, 510102, 510103,\n    510104, 510105, 510106, 510107, 510108, 510111, 510112, 510113, 510114,\n    510115, 510116, 510117, 510121, 510122, 510123, 510124, 510125, 510126,\n    510127, 510128, 510129, 510130, 510131, 510132, 510181, 510182, 510183,\n    510184, 510185, 510201, 510202, 510203, 510211, 510212, 510213, 510214,\n    510215, 510216, 510217, 510218, 510219, 510221, 510222, 510223, 510224,\n    510225, 510226, 510227, 510228, 510229, 510230, 510231, 510232, 510281,\n    510282, 510283, 510301, 510302, 510303, 510304, 510311, 510321, 510322,\n    510401, 510402, 510403, 510411, 510421, 510422, 510501, 510502, 510503,\n    510504, 510521, 510522, 510523, 510524, 510525, 510601, 510602, 510603,\n    510621, 510622, 510623, 510624, 510625, 510626, 510681, 510682, 510683,\n    510701, 510702, 510703, 510704, 510705, 510721, 510722, 510723, 510724,\n    510725, 510726, 510727, 510781, 510801, 510802, 510811, 510812, 510821,\n    510822, 510823, 510824, 510901, 510902, 510903, 510904, 510921, 510922,\n    510923, 511001, 511002, 511011, 511021, 511022, 511023, 511024, 511025,\n    511026, 511027, 511028, 511081, 511082, 511083, 511101, 511102, 511111,\n    511112, 511113, 511121, 511122, 511123, 511124, 511125, 511126, 511127,\n    511128, 511129, 511130, 511131, 511132, 511133, 511181, 511201, 511202,\n    511203, 511204, 511221, 511222, 511223, 511224, 511225, 511226, 511227,\n    511228, 511301, 511302, 511303, 511304, 511321, 511322, 511323, 511324,\n    511325, 511381, 511401, 511402, 511403, 511421, 511422, 511423, 511424,\n    511425, 511501, 511502, 511503, 511521, 511522, 511523, 511524, 511525,\n    511526, 511527, 511528, 511529, 511601, 511602, 511603, 511621, 511622,\n    511623, 511681, 511701, 511702, 511703, 511721, 511722, 511723, 511724,\n    511725, 511781, 511801, 511802, 511803, 511821, 511822, 511823, 511824,\n    511825, 511826, 511827, 511901, 511902, 511903, 511921, 511922, 511923,\n    512001, 512002, 512021, 512022, 512081, 512101, 512121, 512122, 512123,\n    512124, 512125, 512126, 512127, 512128, 512129, 512130, 512131, 512132,\n    512201, 512202, 512221, 512222, 512223, 512224, 512225, 512226, 512227,\n    512228, 512229, 512230, 512231, 512232, 512233, 512234, 512235, 512236,\n    512237, 512301, 512302, 512321, 512322, 512323, 512324, 512325, 512326,\n    512327, 512328, 512329, 512330, 512401, 512402, 512421, 512422, 512423,\n    512424, 512425, 512426, 512427, 512428, 512429, 512430, 512431, 512432,\n    512433, 512434, 512435, 512436, 512501, 512502, 512521, 512522, 512523,\n    512524, 512525, 512526, 512527, 512528, 512529, 512530, 512531, 512532,\n    512533, 512534, 512535, 512601, 512621, 512622, 512623, 512624, 512625,\n    512626, 512627, 512628, 512629, 512630, 512631, 512632, 512633, 512634,\n    512701, 512721, 512722, 512723, 512724, 512725, 512726, 512727, 512728,\n    512729, 512730, 512731, 512732, 512801, 512802, 512821, 512822, 512823,\n    512824, 512825, 512826, 512827, 512828, 512829, 512830, 512831, 512832,\n    512833, 512834, 512835, 512836, 512837, 512901, 512902, 512903, 512921,\n    512922, 512923, 512924, 512925, 512926, 512927, 512928, 512929, 512930,\n    512931, 512932, 513001, 513002, 513021, 513022, 513023, 513024, 513025,\n    513026, 513027, 513028, 513029, 513030, 513031, 513032, 513101, 513121,\n    513122, 513123, 513124, 513125, 513126, 513127, 513128, 513201, 513221,\n    513222, 513223, 513224, 513225, 513226, 513227, 513228, 513229, 513230,\n    513231, 513232, 513233, 513301, 513321, 513322, 513323, 513324, 513325,\n    513326, 513327, 513328, 513329, 513330, 513331, 513332, 513333, 513334,\n    513335, 513336, 513337, 513338, 513401, 513421, 513422, 513423, 513424,\n    513425, 513426, 513427, 513428, 513429, 513430, 513431, 513432, 513433,\n    513434, 513435, 513436, 513437, 513438, 513439, 513501, 513521, 513522,\n    513523, 513524, 513525, 513601, 513621, 513622, 513623, 513624, 513701,\n    513721, 513722, 513723, 513801, 513821, 513822, 513823, 513824, 513825,\n    513826, 513901, 513902, 513921, 513922, 517001, 517002, 517003, 517021,\n    517022, 517023, 517081, 519001, 519002, 519003, 519004, 519005, 519006,\n    519007, 519008, 519009, 519010, 519011, 519012, 519013, 520101, 520102,\n    520103, 520111, 520112, 520113, 520114, 520115, 520121, 520122, 520123,\n    520181, 520201, 520202, 520203, 520221, 520222, 520281, 520301, 520302,\n    520303, 520304, 520321, 520322, 520323, 520324, 520325, 520326, 520327,\n    520328, 520329, 520330, 520381, 520382, 520401, 520402, 520403, 520421,\n    520422, 520423, 520424, 520425, 520501, 520502, 520521, 520522, 520523,\n    520524, 520525, 520526, 520527, 520601, 520602, 520603, 520621, 520622,\n    520623, 520624, 520625, 520626, 520627, 520628, 522101, 522102, 522103,\n    522121, 522122, 522123, 522124, 522125, 522126, 522127, 522128, 522129,\n    522130, 522131, 522132, 522201, 522221, 522222, 522223, 522224, 522225,\n    522226, 522227, 522228, 522229, 522230, 522301, 522321, 522322, 522323,\n    522324, 522325, 522326, 522327, 522328, 522401, 522421, 522422, 522423,\n    522424, 522425, 522426, 522427, 522428, 522501, 522502, 522521, 522522,\n    522523, 522524, 522525, 522526, 522527, 522528, 522529, 522530, 522601,\n    522621, 522622, 522623, 522624, 522625, 522626, 522627, 522628, 522629,\n    522630, 522631, 522632, 522633, 522634, 522635, 522636, 522701, 522702,\n    522721, 522722, 522723, 522724, 522725, 522726, 522727, 522728, 522729,\n    522730, 522731, 522732, 530101, 530102, 530103, 530111, 530112, 530113,\n    530114, 530115, 530121, 530122, 530123, 530124, 530125, 530126, 530127,\n    530128, 530129, 530181, 530201, 530301, 530302, 530303, 530321, 530322,\n    530323, 530324, 530325, 530326, 530327, 530328, 530381, 530401, 530402,\n    530403, 530421, 530422, 530423, 530424, 530425, 530426, 530427, 530428,\n    530501, 530502, 530521, 530522, 530523, 530524, 530581, 530601, 530602,\n    530621, 530622, 530623, 530624, 530625, 530626, 530627, 530628, 530629,\n    530630, 530701, 530702, 530721, 530722, 530723, 530724, 530801, 530802,\n    530821, 530822, 530823, 530824, 530825, 530826, 530827, 530828, 530829,\n    530901, 530902, 530921, 530922, 530923, 530924, 530925, 530926, 530927,\n    532101, 532121, 532122, 532123, 532124, 532125, 532126, 532127, 532128,\n    532129, 532130, 532131, 532201, 532202, 532221, 532222, 532223, 532224,\n    532225, 532226, 532227, 532228, 532229, 532230, 532231, 532232, 532233,\n    532301, 532321, 532322, 532323, 532324, 532325, 532326, 532327, 532328,\n    532329, 532330, 532331, 532401, 532421, 532422, 532423, 532424, 532425,\n    532426, 532427, 532428, 532429, 532501, 532502, 532503, 532504, 532521,\n    532522, 532523, 532524, 532525, 532526, 532527, 532528, 532529, 532530,\n    532531, 532532, 532601, 532621, 532622, 532623, 532624, 532625, 532626,\n    532627, 532628, 532701, 532721, 532722, 532723, 532724, 532725, 532726,\n    532727, 532728, 532729, 532730, 532801, 532821, 532822, 532823, 532901,\n    532921, 532922, 532923, 532924, 532925, 532926, 532927, 532928, 532929,\n    532930, 532931, 532932, 533001, 533021, 533022, 533023, 533024, 533025,\n    533101, 533102, 533103, 533121, 533122, 533123, 533124, 533125, 533126,\n    533201, 533221, 533222, 533223, 533224, 533301, 533321, 533322, 533323,\n    533324, 533325, 533401, 533421, 533422, 533423, 533501, 533521, 533522,\n    533523, 533524, 533525, 533526, 533527, 533528, 540101, 540102, 540103,\n    540104, 540121, 540122, 540123, 540124, 540125, 540126, 540127, 540128,\n    540129, 540130, 540131, 540201, 540202, 540221, 540222, 540223, 540224,\n    540225, 540226, 540227, 540228, 540229, 540230, 540231, 540232, 540233,\n    540234, 540235, 540236, 540237, 540301, 540302, 540321, 540322, 540323,\n    540324, 540325, 540326, 540327, 540328, 540329, 540330, 540401, 540402,\n    540421, 540422, 540423, 540424, 540425, 540426, 540501, 540502, 540521,\n    540522, 540523, 540524, 540525, 540526, 540527, 540528, 540529, 540530,\n    540531, 540601, 540602, 540621, 540622, 540623, 540624, 540625, 540626,\n    540627, 540628, 540629, 540630, 542101, 542121, 542122, 542123, 542124,\n    542125, 542126, 542127, 542128, 542129, 542130, 542131, 542132, 542133,\n    542134, 542135, 542136, 542137, 542201, 542221, 542222, 542223, 542224,\n    542225, 542226, 542227, 542228, 542229, 542230, 542231, 542232, 542233,\n    542301, 542321, 542322, 542323, 542324, 542325, 542326, 542327, 542328,\n    542329, 542330, 542331, 542332, 542333, 542334, 542335, 542336, 542337,\n    542338, 542401, 542421, 542422, 542423, 542424, 542425, 542426, 542427,\n    542428, 542429, 542430, 542431, 542501, 542521, 542522, 542523, 542524,\n    542525, 542526, 542527, 542528, 542601, 542621, 542622, 542623, 542624,\n    542625, 542626, 542627, 542701, 542721, 542722, 542723, 542724, 542725,\n    542726, 542727, 610101, 610102, 610103, 610104, 610111, 610112, 610113,\n    610114, 610115, 610116, 610117, 610118, 610121, 610122, 610123, 610124,\n    610125, 610126, 610201, 610202, 610203, 610204, 610221, 610222, 610301,\n    610302, 610303, 610304, 610321, 610322, 610323, 610324, 610325, 610326,\n    610327, 610328, 610329, 610330, 610331, 610401, 610402, 610403, 610404,\n    610421, 610422, 610423, 610424, 610425, 610426, 610427, 610428, 610429,\n    610430, 610431, 610481, 610501, 610502, 610503, 610521, 610522, 610523,\n    610524, 610525, 610526, 610527, 610528, 610581, 610582, 610601, 610602,\n    610603, 610621, 610622, 610623, 610624, 610625, 610626, 610627, 610628,\n    610629, 610630, 610631, 610632, 610701, 610702, 610703, 610721, 610722,\n    610723, 610724, 610725, 610726, 610727, 610728, 610729, 610730, 610801,\n    610802, 610803, 610821, 610822, 610823, 610824, 610825, 610826, 610827,\n    610828, 610829, 610830, 610831, 610881, 610901, 610902, 610921, 610922,\n    610923, 610924, 610925, 610926, 610927, 610928, 610929, 611001, 611002,\n    611021, 611022, 611023, 611024, 611025, 611026, 612101, 612102, 612103,\n    612121, 612122, 612123, 612124, 612125, 612126, 612127, 612128, 612129,\n    612130, 612131, 612132, 612133, 612201, 612221, 612222, 612223, 612224,\n    612225, 612226, 612227, 612228, 612229, 612230, 612231, 612232, 612233,\n    612301, 612321, 612322, 612323, 612324, 612325, 612326, 612327, 612328,\n    612329, 612330, 612401, 612421, 612422, 612423, 612424, 612425, 612426,\n    612427, 612428, 612429, 612430, 612501, 612521, 612522, 612523, 612524,\n    612525, 612526, 612527, 612601, 612621, 612622, 612623, 612624, 612625,\n    612626, 612627, 612628, 612629, 612630, 612631, 612632, 612633, 612701,\n    612721, 612722, 612723, 612724, 612725, 612726, 612727, 612728, 612729,\n    612730, 612731, 612732, 619001, 619002, 619003, 620101, 620102, 620103,\n    620104, 620105, 620111, 620112, 620121, 620122, 620123, 620201, 620301,\n    620302, 620321, 620401, 620402, 620403, 620421, 620422, 620423, 620501,\n    620502, 620503, 620521, 620522, 620523, 620524, 620525, 620601, 620602,\n    620621, 620622, 620623, 620701, 620702, 620721, 620722, 620723, 620724,\n    620725, 620801, 620802, 620821, 620822, 620823, 620824, 620825, 620826,\n    620901, 620902, 620921, 620922, 620923, 620924, 620925, 620981, 620982,\n    621001, 621002, 621021, 621022, 621023, 621024, 621025, 621026, 621027,\n    621101, 621102, 621121, 621122, 621123, 621124, 621125, 621126, 621201,\n    621202, 621221, 621222, 621223, 621224, 621225, 621226, 621227, 621228,\n    622101, 622102, 622103, 622121, 622122, 622123, 622124, 622125, 622126,\n    622201, 622221, 622222, 622223, 622224, 622225, 622226, 622301, 622321,\n    622322, 622323, 622324, 622325, 622326, 622401, 622421, 622422, 622423,\n    622424, 622425, 622426, 622427, 622428, 622429, 622501, 622521, 622522,\n    622523, 622524, 622525, 622526, 622527, 622528, 622529, 622530, 622531,\n    622601, 622621, 622622, 622623, 622624, 622625, 622626, 622627, 622628,\n    622629, 622630, 622701, 622721, 622722, 622723, 622724, 622725, 622726,\n    622727, 622801, 622821, 622822, 622823, 622824, 622825, 622826, 622827,\n    622901, 622921, 622922, 622923, 622924, 622925, 622926, 622927, 623001,\n    623021, 623022, 623023, 623024, 623025, 623026, 623027, 630101, 630102,\n    630103, 630104, 630105, 630111, 630121, 630122, 630123, 630201, 630202,\n    630203, 630221, 630222, 630223, 630224, 630225, 632101, 632121, 632122,\n    632123, 632124, 632125, 632126, 632127, 632128, 632201, 632221, 632222,\n    632223, 632224, 632301, 632321, 632322, 632323, 632324, 632421, 632501,\n    632521, 632522, 632523, 632524, 632525, 632601, 632621, 632622, 632623,\n    632624, 632625, 632626, 632701, 632721, 632722, 632723, 632724, 632725,\n    632726, 632801, 632802, 632821, 632822, 632823, 640101, 640102, 640103,\n    640104, 640105, 640106, 640121, 640122, 640181, 640201, 640202, 640204,\n    640205, 640211, 640221, 640222, 640223, 640301, 640302, 640303, 640321,\n    640322, 640323, 640324, 640381, 640382, 640401, 640402, 640421, 640422,\n    640423, 640424, 640425, 640501, 640502, 640521, 640522, 642101, 642102,\n    642103, 642121, 642122, 642123, 642124, 642125, 642126, 642127, 642201,\n    642221, 642222, 642223, 642224, 642225, 642226, 650101, 650102, 650103,\n    650104, 650105, 650106, 650107, 650108, 650109, 650121, 650201, 650202,\n    650203, 650204, 650205, 650301, 650401, 650402, 650421, 650422, 650501,\n    650502, 650521, 650522, 652101, 652121, 652122, 652123, 652201, 652221,\n    652222, 652223, 652301, 652302, 652303, 652321, 652322, 652323, 652324,\n    652325, 652326, 652327, 652328, 652401, 652402, 652403, 652404, 652421,\n    652422, 652423, 652424, 652425, 652426, 652427, 652428, 652501, 652521,\n    652522, 652523, 652524, 652525, 652526, 652527, 652601, 652621, 652622,\n    652623, 652624, 652625, 652626, 652627, 652701, 652702, 652721, 652722,\n    652723, 652801, 652821, 652822, 652823, 652824, 652825, 652826, 652827,\n    652828, 652829, 652901, 652921, 652922, 652923, 652924, 652925, 652926,\n    652927, 652928, 652929, 653001, 653021, 653022, 653023, 653024, 653101,\n    653121, 653122, 653123, 653124, 653125, 653126, 653127, 653128, 653129,\n    653130, 653131, 653201, 653221, 653222, 653223, 653224, 653225, 653226,\n    653227, 654001, 654002, 654003, 654004, 654021, 654022, 654023, 654024,\n    654025, 654026, 654027, 654028, 654101, 654121, 654122, 654123, 654124,\n    654125, 654126, 654127, 654128, 654201, 654202, 654221, 654222, 654223,\n    654224, 654225, 654226, 654301, 654321, 654322, 654323, 654324, 654325,\n    654326, 659001, 659002, 659003, 659004, 659005, 659006, 659007, 659008,\n    659009, 659010, 710000, 810000, 820000, 830000, 130600, 460300, 500000,\n];\n","import areaSet from './area'\n\n/**\n * @description 校验出生日期\n * @param {String} birth 8位出生日期 形如20210601\n * @returns {Boolean} 校验是否通过\n */\nconst verifyBirthDate = (birth) => {\n    // 格式化传入的日期格式为 yyyy-mm-dd\n    const serializedBirth = `${birth.slice(0, 4)}-${birth.slice(4, 6)}-${birth.slice(6)}`;\n    const birthDate = new Date(serializedBirth);\n    const now = new Date();\n    const earliestDate = new Date('1900-01-01');  // 设置最早可能的出生日期\n\n    // 检查日期是否有效\n    if (isNaN(birthDate.getTime())) return false;\n\n    // 检查日期是否在合理范围内\n    if (birthDate > now || birthDate < earliestDate) return false;\n\n    return true;\n};\n\n/**\n * @description 校验码字符校验函数\n * @param {String} cardNum 传入的身份证号\n * @returns {Boolean} 校验是否通过\n */\nconst verifyCheckCode = (cardNum) => {\n    // 本体码\n    const masterCode = cardNum.slice(0, 17).split(\"\").map(Number);\n    // 校验码\n    const checkCode = cardNum.slice(17).toLowerCase();\n    // 校验因子\n    const weightingFactor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];\n    // 校验码换算关系\n    const pattern = ['1', '0', 'x', '9', '8', '7', '6', '5', '4', '3', '2'];\n    // 各位值与对应校验因子相乘，并求和\n    const sum = masterCode.reduce((pre, cur, ix) => pre + cur * weightingFactor[ix], 0);\n    // 累加值对11取余\n    const val = sum % 11;\n    // 能与换算关系对应上则返回true，否则返回false\n    return pattern[val] === checkCode;\n};\n\n/**\n * @description 身份证号码校验，判断输入的身份证号码是否合法\n * @param {String} cardNum 待校验身份证号码\n * @returns {Boolean} 是否校验通过\n */\nexport const verifyCardNum = (cardNum = \"\") => {\n    // 对参数进行格式化\n    const serializedCardNum = cardNum.toString().trim();\n\n    // 长度校验\n    if (serializedCardNum.length !== 18) return false;\n\n    // 严格的正则校验\n    if (!/^[1-9]\\d{5}(19|20)\\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])\\d{3}[0-9Xx]$/.test(serializedCardNum)) {\n        return false;\n    }\n\n    // 地址码检验\n    const areaCode = Number(serializedCardNum.slice(0, 6));\n    if (!areaSet.includes(areaCode)) return false;\n\n    // 出生日期码校验\n    const birthCode = serializedCardNum.slice(6, 14);\n    if (!verifyBirthDate(birthCode)) return false;\n\n    // 校验码校验\n    if (!verifyCheckCode(serializedCardNum)) return false;\n\n    // 所有校验通过后，返回true\n    return true;\n};\n","import { verifyCardNum } from \"../plugins/verify\";\nimport { isArray, isObject } from \"./type\";\n\n/**\n * 验证网址是否合法\n * @param {string} value 网址\n * @returns {boolean} 是否合法\n */\nexport function isUrl(value) {\n    if (typeof value !== 'string') return false;\n    const reg = /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/;\n    return reg.test(value);\n}\n\n/**\n * 验证邮箱地址是否合法\n * @param {string} value 邮箱地址\n * @returns {boolean} 是否合法\n */\nexport function isEmail(value) {\n    if (typeof value !== 'string') return false;\n    return /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(value);\n}\n\n/**\n * 验证手机号码是否合法（中国大陆）\n * @param {string} value 手机号\n * @returns {boolean} 是否合法\n */\nexport function isPhone(value) {\n    if (typeof value !== 'string') return false;\n    return /^1[3-9]\\d{9}$/.test(value);\n}\n\n/**\n * 是否为小写字母\n * @param {string} value 内容\n * @returns {boolean} 是否为小写字母\n */\nexport function isLowerCase(value) {\n    if (typeof value !== 'string') return false;\n    return /^[a-z]+$/.test(value);\n}\n\n/**\n * 是否为大写字母\n * @param {string} value 内容\n * @returns {boolean} 是否为大写字母\n */\nexport function isUpperCase(value) {\n    if (typeof value !== 'string') return false;\n    return /^[A-Z]+$/.test(value);\n}\n\n/**\n * 是否为大小写字母\n * @param {string} value 内容\n * @returns {boolean} 是否为大小写字母\n */\nexport function isAlphabets(value) {\n    if (typeof value !== 'string') return false;\n    return /^[A-Za-z]+$/.test(value);\n}\n\n/**\n * 验证身份证号码\n * @param {string} value 身份证号码\n * @returns {boolean} 是否合法\n */\nexport function isIdCard(value) {\n    if (typeof value !== 'string') return false;\n    return verifyCardNum(value);\n}\n\n/**\n * 判断中文姓名是否正确\n * @param {string} value 姓名\n * @returns {boolean} 是否合法\n */\nexport function isName(value) {\n    if (typeof value !== 'string') return false;\n    return /^[\\u4e00-\\u9fa5]{2,4}$/.test(value);\n}\n\n/**\n * 判断是否为整数\n * @param {string|number} value 内容\n * @returns {boolean} 是否为整数\n */\nexport function isNum(value) {\n    return /^-?\\d+$/.test(String(value));\n}\n\n/**\n * 判断是否为小数\n * @param {string|number} value 内容\n * @returns {boolean} 是否为小数\n */\nexport function isNumord(value) {\n    return /^-?\\d+(\\.\\d+)?$/.test(String(value));\n}\n\n/**\n * 是否为空，undefined、null、空字符串时，返回true\n * @param {*} value 数据内容\n * @returns {boolean} 是否为空\n */\nexport function isValueNull(value) {\n    return value === undefined || value === null || value === '';\n}\n\n/**\n * 是否为空，采用ES6空值合并运算符\n * @param {*} value 数据内容\n * @returns {boolean} 是否为空\n */\nexport function isNullES(value) {\n    return (value ?? '') === '';\n}\n\n/**\n * 判断是否为空（包括对象和数组）\n * @param {*} value 数据内容\n * @returns {boolean} 是否为空\n */\nexport function isAllNull(value) {\n    if (isNullES(value)) {\n        return true;\n    } else if (isObject(value)) {\n        return Object.keys(value).length === 0;\n    } else if (isArray(value)) {\n        return value.length === 0;\n    } else {\n        return false;\n    }\n}\n\n/**\n * 判断对象是否为空\n * @param {*} value 数据内容\n * @returns {boolean} 是否为空\n */\nexport function isObjNull(value) {\n    return !isObject(value) || Object.keys(value).length === 0;\n}\n\n/**\n * 判断数组是否为空\n * @param {*} arr 数据内容\n * @returns {boolean} 是否为空\n */\nexport function isArrNull(arr) {\n    return !isArray(arr) || arr.length === 0;\n}\n\n/**\n * 效验是否为数字或小数\n * @param {string|number} text 字符串内容\n * @param {boolean} [allowNegative=true] 是否允许负数\n * @returns {boolean} 是否为数字或小数\n */\nexport function isNumberReg(text, allowNegative = true) {\n    const pattern = allowNegative ? /^-?\\d+(\\.\\d+)?$/ : /^\\d+(\\.\\d+)?$/;\n    return pattern.test(String(text));\n}\n\n/**\n * 饿了么UI的表单验证\n * @param {Object} formRef 表单ref\n * @returns {Promise<boolean>} 验证结果\n */\nexport async function formValidate(formRef) {\n    if (!formRef || typeof formRef.validate !== 'function') {\n        throw new Error('无效的表单校验');\n    }\n    return new Promise((resolve) => {\n        formRef.validate((valid) => {\n            resolve(!!valid);\n        });\n    });\n}\n","import { isArray } from './type';\n\n/**\n * 创建初始数组\n * @param {*} value - 默认值\n * @param {number} len - 数组长度\n * @returns {Array} - 新创建的数组\n */\nexport const createArr = (value = '', len = 1) => Array(len).fill(value);\n\n/**\n * 数组随机打乱的方法\n * @param {Array} arr - 待打乱的数组\n * @returns {Array} - 打乱后的新数组\n */\nexport function arrShuffle(arr) {\n    if (!isArray(arr)) return [];\n    return [...arr].sort(() => Math.random() - 0.5);\n}\n\n/**\n * 一维数组中是否存在\n * @param {Array} arr - 一维数组\n * @param {*} key - 内容\n * @param {number} variable - 变量\n * @returns {boolean}\n */\nexport function isArrItem(arr, key, variable = -1) {\n    if (!isArray(arr)) return false;\n    const index = arr.indexOf(key);\n    if (typeof variable === 'object') {\n        variable.value = index;\n    }\n    return index !== -1;\n}\n\n/**\n * 二维数组中是否存在\n * @param {Array} arr - 二维数组\n * @param {string} field - 字段名\n * @param {*} key - 字段值\n * @param {number} variable - 变量\n * @returns {boolean}\n */\nexport function isArrIndex(arr, field, key, variable = -1) {\n    if (!isArray(arr)) return false;\n    const index = arrIndex(arr, field, key);\n    if (typeof variable === 'object') {\n        variable.value = index;\n    }\n    return index !== -1;\n}\n\n/**\n * 获取二维数组索引\n * @param {Array} arr - 二维数组\n * @param {string} field - 字段名\n * @param {*} key - 字段值\n * @returns {number}\n */\nexport function arrIndex(arr, field, key) {\n    if (!isArray(arr)) return -1;\n    return arr.findIndex((item) => item[field] == key);\n}\n\n/**\n * 移除数组中指定元素\n * @param {Array} arr - 数组\n * @param {*} item - 元素内容\n * @returns {Array}\n */\nexport function arrDel(arr, item) {\n    if (!isArray(arr)) return [];\n    const index = arr.indexOf(item);\n    if (index === -1) return [...arr];\n    return [...arr.slice(0, index), ...arr.slice(index + 1)];\n}\n\n/**\n * 移除二维数组中指定元素\n * @param {Array} arr - 二维数组\n * @param {string} field - 字段名\n * @param {*} key - 字段值\n * @returns {Array}\n */\nexport function arrDelKey(arr, field, key) {\n    if (!isArray(arr)) return [];\n    const index = arrIndex(arr, field, key);\n    if (index === -1) return [...arr];\n    return arrDel(arr, arr[index]);\n}\n\n/**\n * 移除数组中其它元素\n * @param {Array} arr - 数组\n * @param {*} item - 元素内容\n * @returns {Array}\n */\nexport function arrDelOther(arr, item) {\n    if (!isArray(arr)) return [];\n    const index = arr.indexOf(item);\n    if (index === -1) return [];\n    return [arr[index]];\n}\n\n/**\n * 移除二维数组中其它元素\n * @param {Array} arr - 二维数组\n * @param {string} field - 字段名\n * @param {*} key - 字段值\n * @returns {Array}\n */\nexport function arrDelKeyOther(arr, field, key) {\n    if (!isArray(arr)) return [];\n    const index = arrIndex(arr, field, key);\n    if (index === -1) return [];\n    return [arr[index]];\n}\n\n/**\n * 移除数组中左边的元素\n * @param {Array} arr - 数组\n * @param {*} item - 元素内容\n * @returns {Array}\n */\nexport function arrDelLeft(arr, item) {\n    if (!isArray(arr)) return [];\n    const index = arr.indexOf(item);\n    if (index === -1) return [...arr];\n    return arr.slice(index);\n}\n\n/**\n * 移除二维数组中左边的元素\n * @param {Array} arr - 二维数组\n * @param {string} field - 字段名\n * @param {*} key - 字段值\n * @returns {Array}\n */\nexport function arrDelKeyLeft(arr, field, key) {\n    if (!isArray(arr)) return [];\n    const index = arrIndex(arr, field, key);\n    if (index === -1) return [...arr];\n    return arr.slice(index);\n}\n\n/**\n * 移除数组中右边的元素\n * @param {Array} arr - 数组\n * @param {*} item - 元素内容\n * @returns {Array}\n */\nexport function arrDelRight(arr, item) {\n    if (!isArray(arr)) return [];\n    const index = arr.indexOf(item);\n    if (index === -1) return [...arr];\n    return arr.slice(0, index + 1);\n}\n\n/**\n * 移除二维数组中右边的元素\n * @param {Array} arr - 二维数组\n * @param {string} field - 字段名\n * @param {*} key - 字段值\n * @returns {Array}\n */\nexport function arrDelKeyRight(arr, field, key) {\n    if (!isArray(arr)) return [];\n    const index = arrIndex(arr, field, key);\n    if (index === -1) return [...arr];\n    return arr.slice(0, index + 1);\n}\n\n/**\n * 替换数组中两个元素的位置\n * @param {Array} arr - 数组\n * @param {*} item1 - 元素1\n * @param {*} item2 - 元素2\n * @returns {Array}\n */\nexport function arrReplace(arr, item1, item2) {\n    if (!isArray(arr)) return [];\n    const index1 = arr.indexOf(item1);\n    const index2 = arr.indexOf(item2);\n    if (index1 === -1 || index2 === -1) return [...arr];\n    const newArr = [...arr];\n    [newArr[index1], newArr[index2]] = [newArr[index2], newArr[index1]];\n    return newArr;\n}\n\n/**\n * 得到两个数组的交集, 两个数组的元素为数值或字符串\n * @param {Array} arr1 - 数组1\n * @param {Array} arr2 - 数组2\n * @returns {Array}\n */\nexport function arrIntersection(arr1, arr2) {\n    if (!isArray(arr1) || !isArray(arr2)) return [];\n    return arr1.filter(item => arr2.includes(item));\n}\n\n/**\n * 得到两个数组的并集, 两个数组的元素为数值或字符串\n * @param {Array} arr1 - 数组1\n * @param {Array} arr2 - 数组2\n * @returns {Array}\n */\nexport function arrUnion(arr1, arr2) {\n    if (!isArray(arr1) || !isArray(arr2)) return [];\n    return Array.from(new Set([...arr1, ...arr2]));\n}\n\n/**\n * 判断要查询的数组是否至少有一个元素包含在目标数组中\n * @param {Array} arr1 - 数组1\n * @param {Array} arr2 - 数组2\n * @returns {boolean}\n */\nexport function arrSomeOf(arr1, arr2) {\n    if (!isArray(arr1) || !isArray(arr2)) return false;\n    return arr1.some(item => arr2.includes(item));\n}\n\n/**\n * 拼接二维数组中的ID\n * @param {Array} arr - 二维数组\n * @returns {string}\n */\nexport function arrToId(arr) {\n    return arrToKey(arr, 'id');\n}\n\n/**\n * 拼接二维数组中的字段\n * @param {Array} arr - 二维数组\n * @param {string} field - 字段名\n * @param {string} join - 分隔符\n * @returns {string}\n */\nexport function arrToKey(arr, field = 'id', join = ',') {\n    if (!isArray(arr)) return '';\n    return arr.map(obj => obj[field]).join(join);\n}\n\n/**\n * 取数组数据, 如果数据存在，就返回原始数据。如果不存在，就返回空数组 []\n * @param {*} value - 数据内容\n * @returns {Array}\n */\nexport function getArrValue(value) {\n    return isArray(value) ? value : [];\n}\n\n/**\n * 取数组中的值\n * @param {Array} arr - 数组\n * @param {string} field - 字段名\n * @param {string} key - 字段名2\n * @param {*} value - 字段值\n * @returns {*}\n */\nexport function arrKeyValue(arr, field, key, value) {\n    if (!isArray(arr) || !value) return '';\n    const index = arrIndex(arr, field, value);\n    return index !== -1 ? (arr[index][key] ?? '') : '';\n}\n\n/**\n * 数组对象排序\n * @param {string} key - 排序字段\n * @param {string} order - 排序方式\n * @returns {Function}\n */\nexport function arrCompare(key, order = 'asc') {\n    return function innerSort(a, b) {\n        if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n            return 0;\n        }\n        const varA = (typeof a[key] === 'string') ? a[key].toUpperCase() : a[key];\n        const varB = (typeof b[key] === 'string') ? b[key].toUpperCase() : b[key];\n        let comparison = 0;\n        if (varA > varB) {\n            comparison = 1;\n        } else if (varA < varB) {\n            comparison = -1;\n        }\n        return (order === 'desc') ? (comparison * -1) : comparison;\n    };\n}\n\n/**\n * 数组对象排序\n * @param {Array} arr - 数组\n * @param {string} field - 字段名\n * @param {string} order - 排序方式 正序 asc 倒序 desc\n * @returns {Array}\n */\nexport function arrKeySort(arr, field = 'id', order = 'asc') {\n    if (!isArray(arr)) return [];\n    return [...arr].sort(arrCompare(field, order));\n}\n\n/**\n * 不区分大小写的一维数组查询\n * @param {Array} arr - 数组\n * @param {string} val - 值\n * @returns {number}\n */\nexport function indexQf(arr, val) {\n    if (!isArray(arr) || typeof val !== 'string') return -1;\n    const lowerVal = val.toLowerCase();\n    return arr.findIndex(item => typeof item === 'string' && item.toLowerCase() === lowerVal);\n}\n\n/**\n * 递归获取最子级的数据\n * @param {Array} arr - 数组数据\n * @param {Object} parameter - 参数 {index,children,key}\n * @returns {Promise<*>}\n */\nexport async function recursionChildren(arr, parameter = {}) {\n    if (!isArray(arr) || arr.length === 0) return null;\n\n    const { index = 0, children = 'children', key = '' } = parameter;\n    const item = arr[index];\n\n    if (!item) return null;\n\n    const childrenArr = item[children];\n    if (isArray(childrenArr) && childrenArr.length > 0) {\n        return await recursionChildren(childrenArr, { ...parameter, index: 0 });\n    } else {\n        return key ? item[key] : item;\n    }\n}\n","// draft的标识符\nconst DRAFTABLE = Symbol.for('immer-draftable');\n\n// 是否是原生对象\nconst isPlainObject = value => {\n    if (!value || typeof value !== \"object\") return false;\n    const proto = Object.getPrototypeOf(value);\n    if (proto === null) return true;\n    const Ctor = Object.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n    return Ctor === Object || (typeof Ctor == \"function\" && Function.toString.call(Ctor) === Object.prototype.constructor.toString());\n}\n\n// 判断是否是一个draft(一个代理对象)\nconst isDraftable = value => Boolean(value && value[DRAFTABLE]);\n\nexport function produce(baseState, fn) {\n    const drafts = new Map();\n    const copies = new Map();\n\n    // Proxy的陷阱\n    const objectTraps = {\n        get(target, key) {\n            if (key === DRAFTABLE) return target;\n            const data = copies.get(target) || target;\n            return getDraft(Reflect.get(data, key));\n        },\n        set(target, key, val) {\n            const copy = shallowCopy(target);\n            const newValue = getDraft(val);\n            copy[key] = isDraftable(newValue) ? newValue[DRAFTABLE] : newValue;\n            return true;\n        }\n    }\n\n    // 获取或创建draft\n    const getDraft = data => {\n        if (isDraftable(data)) return data;\n        if (isPlainObject(data) || Array.isArray(data)) {\n            if (drafts.has(data)) return drafts.get(data);\n            const draft = new Proxy(data, objectTraps);\n            drafts.set(data, draft);\n            return draft;\n        }\n        return data;\n    }\n\n    // 浅拷贝\n    const shallowCopy = data => {\n        if (copies.has(data)) return copies.get(data);\n        const copy = Array.isArray(data) ? [...data] : Object.assign({}, data);\n        copies.set(data, copy);\n        return copy;\n    }\n\n    // 检查是否发生变化\n    const isChange = data => drafts.has(data) || copies.has(data);\n\n    // 最终化处理\n    const finalize = data => {\n        if (!isPlainObject(data) && !Array.isArray(data)) return data;\n        if (!isChange(data)) return data;\n        const copy = shallowCopy(data);\n        Object.keys(copy).forEach(key => {\n            copy[key] = finalize(copy[key]);\n        });\n        return copy;\n    }\n\n    // 清理函数\n    const cleanup = () => {\n        drafts.clear();\n        copies.clear();\n    };\n\n    // 主逻辑\n    const draft = getDraft(baseState);\n    try {\n        fn(draft);\n    } catch (e) {\n        console.error('Error in produce:', e);\n    }\n    const result = finalize(baseState);\n    cleanup();\n    return result;\n}\n","import { isObject } from \"./type\";\nimport { isObjNull } from \"./validate\";\nimport { produce } from \"../plugins/immer\";\n\n/**\n * 对象深拷贝\n * @param {Object} obj 深拷贝的对象\n * @param {WeakMap} cache 缓存已拷贝的对象\n * @returns {*} 深拷贝后的对象\n */\nexport function deepClone(obj, cache = new WeakMap()) {\n    if (!isObject(obj)) {\n        return obj;\n    }\n\n    if (cache.has(obj)) {\n        return cache.get(obj);\n    }\n\n    const cloneTarget = Array.isArray(obj) ? [] : {};\n    cache.set(obj, cloneTarget);\n\n    Object.keys(obj).forEach(key => {\n        cloneTarget[key] = deepClone(obj[key], cache);\n    });\n\n    return cloneTarget;\n}\n\n/**\n * 深拷贝数据 (使用 immer 的 produce 函数)\n * @param {*} data 数据\n * @param {Function} fn 处理函数\n * @returns {*} 深拷贝后的数据\n */\nexport function deepCloneV2(data, fn) {\n    return produce(data, fn);\n}\n\n/**\n * 判断一个对象是否存在key，或者对象是否为空\n * @param {Object} obj 对象\n * @param {string} [key] 字段 (可选)\n * @returns {boolean} 判断结果\n */\nexport function objHasKey(obj, key) {\n    if (key) return key in obj;\n    return Object.keys(obj).length > 0;\n}\n\n/**\n * 判断两个对象是否相等\n * @param {Object} obj1 对象1\n * @param {Object} obj2 对象2\n * @returns {boolean} 是否相等\n */\nexport function objEqual(obj1, obj2) {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n\n    if (keys1.length !== keys2.length) return false;\n\n    for (let key of keys1) {\n        const val1 = obj1[key];\n        const val2 = obj2[key];\n        const areObjects = isObject(val1) && isObject(val2);\n        if (\n            areObjects && !objEqual(val1, val2) ||\n            !areObjects && val1 !== val2\n        ) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * 获取对象值\n * @param {*} value 输入值\n * @param {boolean} [returnFalseIfEmpty=false] 如果为空对象是否返回false\n * @returns {Object|boolean} 处理后的值\n */\nexport function getObjValue(value, returnFalseIfEmpty = false) {\n    if (!isObject(value)) {\n        return returnFalseIfEmpty ? false : {};\n    }\n    return returnFalseIfEmpty && isObjNull(value) ? false : value;\n}\n\n/**\n * 获取对象的嵌套属性值\n * @param {Object} obj 对象\n * @param {string} field 字段名\n * @param {string} [key] 子字段名 (可选)\n * @returns {*} 属性值\n */\nexport function getToObjVal(obj = {}, field, key) {\n    const value = obj?.[field];\n    if (key) {\n        return value?.[key] ?? '';\n    }\n    return getObjValue(value, true);\n}\n\n/**\n * 取对象数据2, 如果数据存在，返回原始数据。如果不存在，或为空对象时,返回false\n * @param value 数据内容\n * @returns {boolean | {}}\n */\nexport function getObjVal(value)\n{\n    const res = getObjValue(value);\n    return isObjNull(res) ? false : res;\n}\n","import { getObjVal } from \"./object\";\n\n// 文件大小单位常量\nconst SIZE_UNITS = ['B', 'KB', 'MB', 'GB', 'TB'];\nconst SIZE_BASES = SIZE_UNITS.map((_, i) => Math.pow(1024, i));\n\n/**\n * 获取文件大小的字符串类型\n * @param {number} size - 文件字节大小\n * @param {boolean} [obj=false] - 是否返回对象\n * @returns {(string|Object)} 格式化后的文件大小\n */\nexport function filterSize(size, obj = false) {\n    if (size === undefined || size === null) {\n        return obj ? {size: 0, unit: 'B'} : '0 B';\n    }\n\n    let i = 0;\n    while (i < SIZE_UNITS.length - 1 && size >= SIZE_BASES[i + 1]) {\n        i++;\n    }\n\n    const formattedSize = (size / SIZE_BASES[i]).toFixed(2);\n    const unit = SIZE_UNITS[i];\n\n    return obj ? {size: formattedSize, unit} : `${formattedSize} ${unit}`;\n}\n\n// 求次幂\nexport function pow1024(num) {\n    return Math.pow(1024, num)\n}\n\n\n/**\n * 判断文件大小是否在限制范围内\n * @param {number} byte - 文件字节大小\n * @param {number} size - 文件大小限制（MB）\n * @returns {boolean} 是否在限制范围内\n */\nexport function isFileSize(byte, size) {\n    return byte <= size * 1024 * 1024;\n}\n\n/**\n * 获取不带后缀的文件名\n * @param {string} name - 完整文件名\n * @returns {string} 不带后缀的文件名\n */\nexport function getFileName(name) {\n    return name ? name.substring(0, name.lastIndexOf(\".\")) : '';\n}\n\n/**\n * 获取文件后缀名\n * @param {string} name - 完整文件名\n * @returns {string} 文件后缀名\n */\nexport function getFileSuffix(name) {\n    return name ? name.substring(name.lastIndexOf(\".\") + 1).toLowerCase() : '';\n}\n\n/**\n * 获取带后缀的文件名（去除路径）\n * @param {string} name - 完整文件路径\n * @returns {string} 带后缀的文件名\n */\nexport function getFileNames(name) {\n    return name ? name.substring(name.lastIndexOf('/') + 1) : '';\n}\n\n/**\n * base64转成文件\n * @param {string} base64 - base64内容\n * @param {string} [type=\"image/jpeg\"] - 文件类型\n * @param {string} [name=Date.now()] - 文件名称\n * @param {string} [suffix=\"jpg\"] - 文件后缀\n * @returns {File} 转换后的文件对象\n */\nexport function base64ToFile(base64, type = \"image/jpeg\", name = Date.now(), suffix = \"jpg\") {\n    if (!base64 || base64.indexOf('base64,') === -1) {\n        throw new Error('Invalid base64 string');\n    }\n\n    const binary = atob(base64.split(\",\")[1]);\n    const array = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        array[i] = binary.charCodeAt(i);\n    }\n    const fileBlob = new Blob([array], {type: type});\n    return new File([fileBlob], `${name}.${suffix}`);\n}\n\n/**\n * 从响应头中获取content-disposition\n * @param {Object} headers - 响应头对象\n * @returns {string} content-disposition值\n */\nconst getDisposition = (headers) => {\n    return headers && headers['content-disposition'] ? headers['content-disposition'] : '';\n};\n\n/**\n * 解析文件名\n * @param {string} disposition - content-disposition值\n * @returns {string} 解析后的文件名\n */\nconst parseFileName = (disposition) => {\n    const filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n    const matches = filenameRegex.exec(disposition);\n    if (matches && matches[1]) {\n        return decodeURIComponent(matches[1].replace(/['\"]/g, ''));\n    }\n    return 'unknown';\n};\n\n/**\n * 新下载文件\n * @param {Object} res - 接口响应的原始数据\n * @param {string} [type=\"\"] - 文件类型\n * @returns {Promise<Object>} 下载结果\n */\nexport function newDownBlob(res, type = \"\") {\n    return new Promise((resolve) => {\n        try {\n            const {data, headers} = res;\n            const disposition = getDisposition(headers);\n            const blob = new Blob([data], { type: type });\n            const blobURL = window.URL.createObjectURL(blob);\n            const tempLink = document.createElement('a');\n            tempLink.style.display = 'none';\n            tempLink.href = blobURL;\n            const filename = parseFileName(disposition);\n            tempLink.setAttribute('download', filename);\n            if (typeof tempLink.download === 'undefined') {\n                tempLink.setAttribute('target', '_blank');\n            }\n            document.body.appendChild(tempLink);\n            tempLink.click();\n            document.body.removeChild(tempLink);\n            window.URL.revokeObjectURL(blobURL);\n            resolve({status: true, msg: '下载成功'});\n        } catch (err) {\n            resolve({status: false, msg: err.message});\n        }\n    });\n}\n\n/**\n * 下载文件\n * @param {Blob} data - 文件内容\n * @param {string} disposition - 响应头中的content-disposition\n * @param {string} [type=\"application/vnd.ms-excel\"] - 文件类型\n */\nexport function downloadBlob(data, disposition = '', type = \"application/vnd.ms-excel\") {\n    const blob = new Blob([data], { type: type });\n    const blobURL = window.URL.createObjectURL(blob);\n    const tempLink = document.createElement('a');\n    tempLink.style.display = 'none';\n    tempLink.href = blobURL;\n    const filename = parseFileName(disposition);\n    tempLink.setAttribute('download', filename);\n    if (typeof tempLink.download === 'undefined') {\n        tempLink.setAttribute('target', '_blank');\n    }\n    document.body.appendChild(tempLink);\n    tempLink.click();\n    document.body.removeChild(tempLink);\n    window.URL.revokeObjectURL(blobURL);\n}\n\n/**\n * 效验文件格式\n * @param {File} file - 文件对象\n * @param {string} accept - 接受的文件格式\n * @returns {boolean} 是否为有效格式\n */\nexport function isFileFormat(file, accept) {\n    const { type: fileType, name } = file;\n    const extension = `.${getFileSuffix(name)}`;\n    const baseType = fileType.split('/')[0];\n    return accept.split(',').some((acceptedType) => {\n        acceptedType = acceptedType.trim();\n        if (acceptedType.startsWith('.')) {\n            return extension === acceptedType;\n        }\n        if (/\\/\\*$/.test(acceptedType)) {\n            return baseType === acceptedType.replace(/\\/\\*$/, '');\n        }\n        if (/^[^/]+\\/[^/]+$/.test(acceptedType)) {\n            return fileType === acceptedType;\n        }\n        return false;\n    });\n}\n\n/**\n * 获取文件类型\n * @param {string} name - 文件名称\n * @param {Object} [typeMap={}] - 自定义类型映射\n * @returns {string} 文件类型\n */\nexport function getFileType(name, typeMap = {}) {\n    const fileType = getFileSuffix(name);\n    const defaultTypeMap = {\n        image: ['gif', 'jpg', 'jpeg', 'png', 'bmp', 'webp'],\n        video: ['mp4', 'm3u8', 'rmvb', 'avi', 'swf', '3gp', 'mkv', 'flv'],\n        audio: ['mp3', 'wav', 'wma', 'ogg', 'aac', 'flac'],\n        compress: ['zip', 'rar', '7z', 'tar', 'gz'],\n        document: ['doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'pdf', 'txt'],\n    };\n\n    const mergedTypeMap = { ...defaultTypeMap, ...getObjVal(typeMap) };\n\n    for (const [type, extensions] of Object.entries(mergedTypeMap)) {\n        if (extensions.includes(fileType)) {\n            return type;\n        }\n    }\n\n    return 'other';\n}\n","import {isNullES} from \"./validate\";\n\n/**\n * 生成UUID\n * @returns {string}\n */\nexport function getUUID() {\n    if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n        return crypto.randomUUID();\n    } else {\n        // 备用方案,生成一个类似UUID的字符串\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n}\n\n/**\n * 生成UniqueID\n * @returns {string}\n */\nexport function uniqueId() {\n    return Math.random().toString(36).slice(2, 10);\n}\n\nconst NUM = '0123456789';\nconst XEU = 'abcdefghijklmnopqrstuvwxyz';\nconst DEU = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * 生成随机字符串,默认为全部类型\n * @param {number} [num=8] 长度\n * @param {string} [type] 类型 默认为全部类型，可传参随机字符池\n * @returns {string}\n */\nexport function getRandom(num = 8, type = NUM + XEU + DEU) {\n    if (num <= 0) return ''\n    return Array.from({length: num}, () => type[Math.floor(Math.random() * type.length)]).join('');\n}\n\n/**\n * 生成随机数字\n * @param {number} [num=8] 长度\n * @returns {string}\n */\nexport function getNumber(num = 8) {\n    return getRandom(num, NUM);\n}\n\n/**\n * 生成随机小写字母\n * @param {number} [num=8] 长度\n * @returns {string}\n */\nexport function getLowerCase(num = 8) {\n    return getRandom(num, XEU);\n}\n\n/**\n * 生成随机大写字母\n * @param {number} [num=8] 长度\n * @returns {string}\n */\nexport function getUpperCase(num = 8) {\n    return getRandom(num, DEU);\n}\n\n/**\n * 生成随机数字 + 小写字母\n * @param {number} [num=8] 长度\n * @returns {string}\n */\nexport function getNumberLower(num = 8) {\n    return getRandom(num, NUM + XEU);\n}\n\n/**\n * 生成随机数字 + 大写字母\n * @param {number} [num=8] 长度\n * @returns {string}\n */\nexport function getNumberUpper(num = 8) {\n    return getRandom(num, NUM + DEU);\n}\n\n/**\n * 生成随机小写字母 + 大写字母\n * @param {number} [num=8] 长度\n * @returns {string}\n */\nexport function getAlphabets(num = 8) {\n    return getRandom(num, XEU + DEU);\n}\n\n/**\n * 生成范围随机数\n * @param {number} lower 起始数字\n * @param {number} upper 结束数字\n * @returns {number|string}\n */\nexport function getRandomFrom(lower, upper) {\n    if (isNullES(lower) || isNullES(upper)) return ''\n    if (lower > upper) {\n        [lower, upper] = [upper, lower]; // 交换上下限\n    }\n    return Math.floor(Math.random() * (upper - lower + 1) + lower);\n}\n","/**\n * Json强转为Form类型\n * @param {Object} obj Json对象\n * @returns {FormData}\n */\nexport function toFormData(obj) {\n    const data = new FormData();\n    Object.entries(obj).forEach(([key, value]) => {\n        data.append(key, Array.isArray(value) ? value.join(',') : value);\n    });\n    return data;\n}\n\n/**\n * 表单序列化\n * @param {Object} form 表单数据\n * @returns {string}\n */\nexport function toSerialize(form) {\n    return Object.entries(form)\n        .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n        .join('&');\n}\n\n/**\n * 颜色混合\n * @param {string} c1 颜色1\n * @param {string} c2 颜色2\n * @param {number} ratio 比例\n * @returns {string}\n */\nexport function toColor(c1, c2, ratio = 0.5) {\n    ratio = Math.max(Math.min(Number(ratio), 1), 0);\n    const r1 = parseInt(c1.slice(1, 3), 16);\n    const g1 = parseInt(c1.slice(3, 5), 16);\n    const b1 = parseInt(c1.slice(5, 7), 16);\n    const r2 = parseInt(c2.slice(1, 3), 16);\n    const g2 = parseInt(c2.slice(3, 5), 16);\n    const b2 = parseInt(c2.slice(5, 7), 16);\n    const r = Math.round(r1 * (1 - ratio) + r2 * ratio);\n    const g = Math.round(g1 * (1 - ratio) + g2 * ratio);\n    const b = Math.round(b1 * (1 - ratio) + b2 * ratio);\n    return `#${[r, g, b].map(x => x.toString(16).padStart(2, '0')).join('')}`;\n}\n\n/**\n * 调整颜色亮度\n * @param {string} color 要改变的颜色\n * @param {number} amount 亮度调整量（0-100）\n * @returns {string}\n */\nexport function toLighten(color, amount = 50) {\n    color = color.replace('#', '');\n    amount = Math.max(Math.min(amount, 100), 0);\n    const num = parseInt(color, 16);\n    const r = Math.min(255, (num >> 16) + amount);\n    const g = Math.min(255, ((num >> 8) & 0x00FF) + amount);\n    const b = Math.min(255, (num & 0x0000FF) + amount);\n    return `#${(1 << 24 | r << 16 | g << 8 | b).toString(16).slice(1)}`;\n}\n\n/**\n * 字符串转数组或JSON\n * @param {string} value 字符串\n * @returns {*}\n */\nexport function toParse(value) {\n    try {\n        return JSON.parse(value);\n    } catch (e) {\n        console.error(\"解析失败:\", e);\n        return null;\n    }\n}\n\n/**\n * 处理栅格间隔\n * @param {number} spacing 间隔\n * @param {string} type margin or padding\n * @returns {string}\n */\nexport function setRowSpace(spacing, type = 'm') {\n    if (spacing === 0) return '';\n    const value = type === 'm' ? -spacing / 2 : spacing / 2;\n    return `${type}:${Math.floor(value)}px`;\n}\n\n/**\n * 数组转对象\n * @param {Array} arr 数组数据\n * @param {string} field 对象键值名\n * @param {Object} objName 对象变量\n * @param {Array} arrName 数组变量\n * @param {string} children 子级字段名\n */\nexport function ArrToOneObj(arr, field, objName = {}, arrName = [], children = 'children') {\n    if (!Array.isArray(arr)) return;\n    arr.forEach(item => {\n        if (typeof item !== 'object') return;\n        objName[item[field]] = { ...item };\n        arrName.push(item[field]);\n        delete objName[item[field]][children];\n        if (Array.isArray(item[children])) {\n            ArrToOneObj(item[children], field, objName, arrName, children);\n        }\n    });\n}\n\n/**\n * 金额格式化:保留几位小数，不四舍五入\n * @param {number} price 金额\n * @param {number} decimal 小数点位数 默认2位\n * @returns {string}\n */\nexport function priceFormat(price, decimal = 2) {\n    if (!price) return '0.00';\n    const fixedPrice = (Math.floor(price * Math.pow(10, decimal)) / Math.pow(10, decimal)).toFixed(decimal);\n    return fixedPrice.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\n/**\n * 数字格式化，转化为 K 或 W\n * @param {number} num 数字内容\n * @returns {string}\n */\nexport function numberFormat(num) {\n    if (num >= 10000) return (num / 10000).toFixed(1) + 'W';\n    if (num >= 1000) return (num / 1000).toFixed(1) + 'K';\n    return num.toString();\n}\n\n/**\n * 计算两个日期之间的差距\n * @param {number} date1 日期时间1，时间戳格式\n * @param {number} date2 日期时间2，时间戳格式\n * @returns {Object}\n */\nexport function calcDate(date1, date2) {\n    const diff = Math.abs(date2 - date1);\n    const days = Math.floor(diff / (24 * 3600 * 1000));\n    const hours = Math.floor((diff % (24 * 3600 * 1000)) / (3600 * 1000));\n    const minutes = Math.floor((diff % (3600 * 1000)) / (60 * 1000));\n    const seconds = Math.floor(diff / 1000);\n    return { days, hours, minutes, seconds };\n}\n\n/**\n * 根据背景色返回适合的文字颜色\n * @param {string} color 背景颜色\n * @param {Object} config 颜色配置\n * @returns {string}\n */\nexport function toTextColor(color, config = {}) {\n    if (!color) return config.black || '#000000';\n    if (color.includes('gradient')) return config.black || '#000000';\n\n    let rgb = color.startsWith('#') ? hexToRgb(color) : parseRgb(color);\n    return isLight(rgb) ? config.black || '#000000' : config.white || '#ffffff';\n}\n\n/**\n * 判断颜色是否为浅色\n * @param {number[]} rgb RGB颜色值\n * @returns {boolean}\n */\nfunction isLight(rgb) {\n    return (0.299 * rgb[0] + 0.587 * rgb[1] + 0.114 * rgb[2]) > 186;\n}\n\n/**\n * 16进制颜色转RGB\n * @param {string} hex 16进制颜色\n * @returns {number[]}\n */\nfunction set16ToRgb(hex) {\n    hex = hex.replace(/^#/, '');\n    if (hex.length === 3) {\n        hex = hex.split('').map(char => char + char).join('');\n    }\n    const num = parseInt(hex, 16);\n    return [num >> 16, (num >> 8) & 255, num & 255];\n}\n\n/**\n * 解析RGB颜色字符串\n * @param {string} rgb RGB颜色字符串\n * @returns {number[]}\n */\nfunction parseRgb(rgb) {\n    return rgb.match(/\\d+/g).map(Number);\n}\n\n/**\n * RGB转换为16进制\n * @param {string} rgb RGB颜色字符串\n * @returns {string}\n */\nexport function setRgbTo16(rgb) {\n    const [r, g, b] = parseRgb(rgb);\n    return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`;\n}\n\n/**\n * 替换URL中的协议为HTTPS\n * @param {string} url URL\n * @returns {string}\n */\nexport function setUrlHttps(url) {\n    return url ? url.replace(/^http:/, 'https:') : url;\n}\n\n/**\n * 替换文本中所有的HTTP为HTTPS\n * @param {string} text 文本\n * @returns {string}\n */\nexport function setAllUrlHttps(text) {\n    return text ? text.replace(/http:\\/\\//g, 'https://') : text;\n}\n\n/**\n * 替换URL中的协议为HTTP\n * @param {string} url URL\n * @returns {string}\n */\nexport function setUrlHttp(url) {\n    return url ? url.replace(/^https:/, 'http:') : url;\n}\n\n/**\n * 替换文本中所有的HTTPS为HTTP\n * @param {string} text 文本\n * @returns {string}\n */\nexport function setAllUrlHttp(text) {\n    return text ? text.replace(/https:\\/\\//g, 'http://') : text;\n}\n","import { isAllNull, isNullES } from \"./validate\";\nimport { calcDate } from \"./to\";\n\n/**\n * 计算缓存是否过期\n * @param {string} key 缓存名称\n * @param {number} [time=2000] 过期时间，毫秒\n * @returns {boolean} 是否过期\n */\nexport function getStoreTime(key, time = 2000) {\n    const data = getStoreData(key, true);\n    if (isNullES(data)) return true;\n    const date = calcDate(data.datetime, new Date().getTime());\n    if (date.seconds > time) {\n        delStoreData(key);\n        return true;\n    }\n    return false;\n}\n\n/**\n * 保存缓存\n * @param {string} key 缓存名称\n * @param {*} value 缓存内容\n * @param {boolean} [session=false] session模式\n */\nexport function setStoreData(key, value, session = false) {\n    setStore({ name: key, content: value, session });\n}\n\n/**\n * 获取缓存\n * @param {string} key 缓存名称\n * @param {boolean} [debug=false] 是否开启调试模式\n * @param {boolean} [session=false] session模式\n * @returns {*} 缓存内容\n */\nexport function getStoreData(key, debug = false, session = false) {\n    return getStore({ name: key, debug, session });\n}\n\n/**\n * 删除缓存\n * @param {string} key 缓存名称\n * @param {boolean} [session=false] session模式\n */\nexport function delStoreData(key, session = false) {\n    removeStore({ name: key, session });\n}\n\n/**\n * 获取全部缓存\n * @param {boolean} [session=false] session模式\n * @returns {Array} 缓存列表\n */\nexport function getAllStore(session = false) {\n    const storage = session ? window.sessionStorage : window.localStorage;\n    return Object.keys(storage).map(key => ({\n        name: key,\n        content: getStore({ name: key, session })\n    }));\n}\n\n/**\n * 获取localStorage或sessionStorage\n * @param {Object} options 选项\n * @param {string} options.name 缓存名称\n * @param {boolean} [options.debug=false] 是否开启调试模式\n * @param {boolean} [options.session=false] session模式\n * @returns {*} 缓存内容\n */\nfunction getStore({ name, debug = false, session = false }) {\n    const storage = session ? window.sessionStorage : window.localStorage;\n    let obj = storage.getItem(name);\n    if (isAllNull(obj)) return;\n\n    try {\n        obj = JSON.parse(obj);\n    } catch (e) {\n        console.error(`解析缓存数据失败: ${name}`, e);\n        return obj;\n    }\n\n    if (debug) return obj;\n\n    const { dataType, content } = obj;\n    switch (dataType) {\n        case 'number': return Number(content);\n        case 'boolean': return Boolean(content);\n        case 'object': return content;\n        default: return content ?? '';\n    }\n}\n\n/**\n * 存储localStorage或sessionStorage\n * @param {Object} options 选项\n * @param {string} options.name 缓存名称\n * @param {*} options.content 缓存内容\n * @param {boolean} [options.session=false] session模式\n */\nfunction setStore({ name, content, session = false }) {\n    const obj = {\n        dataType: typeof content,\n        content: content ?? '',\n        session,\n        datetime: new Date().getTime()\n    };\n    const storage = session ? window.sessionStorage : window.localStorage;\n    try {\n        storage.setItem(name, JSON.stringify(obj));\n    } catch (e) {\n        console.error(`存储数据失败: ${name}`, e);\n    }\n}\n\n/**\n * 删除localStorage或sessionStorage\n * @param {Object} options 选项\n * @param {string} options.name 缓存名称\n * @param {boolean} [options.session=false] session模式\n */\nfunction removeStore({ name, session = false }) {\n    const storage = session ? window.sessionStorage : window.localStorage;\n    storage.removeItem(name);\n}\n\n/**\n * 清空缓存\n * @param {boolean} [session=false] session模式\n */\nexport function clearStore(session = false) {\n    const storage = session ? window.sessionStorage : window.localStorage;\n    storage.clear();\n}\n\n/**\n * 清空全部缓存\n */\nexport function clearStoreAll() {\n    window.sessionStorage.clear();\n    window.localStorage.clear();\n}\n","'use strict';\n\n/**\n * 颜色类，用于处理RGB颜色\n */\nexport class Color {\n    /**\n     * 创建一个Color实例\n     * @param {number} r - 红色值(0-255)\n     * @param {number} g - 绿色值(0-255)\n     * @param {number} b - 蓝色值(0-255)\n     */\n    constructor(r, g, b) {\n        this.set(r, g, b);\n    }\n\n    /**\n     * 返回颜色的RGB字符串表示\n     * @returns {string} RGB字符串\n     */\n    toString() {\n        return `rgb(${Math.round(this.r)}, ${Math.round(this.g)}, ${Math.round(this.b)})`;\n    }\n\n    /**\n     * 设置颜色的RGB值\n     * @param {number} r - 红色值(0-255)\n     * @param {number} g - 绿色值(0-255)\n     * @param {number} b - 蓝色值(0-255)\n     */\n    set(r, g, b) {\n        this.r = this.clamp(r);\n        this.g = this.clamp(g);\n        this.b = this.clamp(b);\n    }\n\n    /**\n     * 应用色相旋转\n     * @param {number} angle - 旋转角度\n     */\n    hueRotate(angle = 0) {\n        angle = angle / 180 * Math.PI;\n        const sin = Math.sin(angle);\n        const cos = Math.cos(angle);\n\n        this.multiply([\n            0.213 + cos * 0.787 - sin * 0.213,\n            0.715 - cos * 0.715 - sin * 0.715,\n            0.072 - cos * 0.072 + sin * 0.928,\n            0.213 - cos * 0.213 + sin * 0.143,\n            0.715 + cos * 0.285 + sin * 0.140,\n            0.072 - cos * 0.072 - sin * 0.283,\n            0.213 - cos * 0.213 - sin * 0.787,\n            0.715 - cos * 0.715 + sin * 0.715,\n            0.072 + cos * 0.928 + sin * 0.072,\n        ]);\n    }\n\n    /**\n     * 应用灰度效果\n     * @param {number} value - 灰度值(0-1)\n     */\n    grayscale(value = 1) {\n        this.multiply([\n            0.2126 + 0.7874 * (1 - value),\n            0.7152 - 0.7152 * (1 - value),\n            0.0722 - 0.0722 * (1 - value),\n            0.2126 - 0.2126 * (1 - value),\n            0.7152 + 0.2848 * (1 - value),\n            0.0722 - 0.0722 * (1 - value),\n            0.2126 - 0.2126 * (1 - value),\n            0.7152 - 0.7152 * (1 - value),\n            0.0722 + 0.9278 * (1 - value),\n        ]);\n    }\n\n    /**\n     * 应用棕褐色效果\n     * @param {number} value - 棕褐色值(0-1)\n     */\n    sepia(value = 1) {\n        this.multiply([\n            0.393 + 0.607 * (1 - value),\n            0.769 - 0.769 * (1 - value),\n            0.189 - 0.189 * (1 - value),\n            0.349 - 0.349 * (1 - value),\n            0.686 + 0.314 * (1 - value),\n            0.168 - 0.168 * (1 - value),\n            0.272 - 0.272 * (1 - value),\n            0.534 - 0.534 * (1 - value),\n            0.131 + 0.869 * (1 - value),\n        ]);\n    }\n\n    /**\n     * 应用饱和度效果\n     * @param {number} value - 饱和度值(0-1)\n     */\n    saturate(value = 1) {\n        this.multiply([\n            0.213 + 0.787 * value,\n            0.715 - 0.715 * value,\n            0.072 - 0.072 * value,\n            0.213 - 0.213 * value,\n            0.715 + 0.285 * value,\n            0.072 - 0.072 * value,\n            0.213 - 0.213 * value,\n            0.715 - 0.715 * value,\n            0.072 + 0.928 * value,\n        ]);\n    }\n\n    /**\n     * 应用矩阵变换\n     * @param {number[]} matrix - 3x3变换矩阵\n     */\n    multiply(matrix) {\n        const newR = this.clamp(this.r * matrix[0] + this.g * matrix[1] + this.b * matrix[2]);\n        const newG = this.clamp(this.r * matrix[3] + this.g * matrix[4] + this.b * matrix[5]);\n        const newB = this.clamp(this.r * matrix[6] + this.g * matrix[7] + this.b * matrix[8]);\n        this.r = newR;\n        this.g = newG;\n        this.b = newB;\n    }\n\n    /**\n     * 应用亮度效果\n     * @param {number} value - 亮度值(0-1)\n     */\n    brightness(value = 1) {\n        this.linear(value);\n    }\n\n    /**\n     * 应用对比度效果\n     * @param {number} value - 对比度值(0-1)\n     */\n    contrast(value = 1) {\n        this.linear(value, -(0.5 * value) + 0.5);\n    }\n\n    /**\n     * 应用线性变换\n     * @param {number} slope - 斜率\n     * @param {number} intercept - 截距\n     */\n    linear(slope = 1, intercept = 0) {\n        this.r = this.clamp(this.r * slope + intercept * 255);\n        this.g = this.clamp(this.g * slope + intercept * 255);\n        this.b = this.clamp(this.b * slope + intercept * 255);\n    }\n\n    /**\n     * 应用反转效果\n     * @param {number} value - 反转值(0-1)\n     */\n    invert(value = 1) {\n        this.r = this.clamp((value + this.r / 255 * (1 - 2 * value)) * 255);\n        this.g = this.clamp((value + this.g / 255 * (1 - 2 * value)) * 255);\n        this.b = this.clamp((value + this.b / 255 * (1 - 2 * value)) * 255);\n    }\n\n    /**\n     * 转换为HSL颜色空间\n     * @returns {{h: number, s: number, l: number}} HSL值\n     */\n    hsl() {\n        const r = this.r / 255;\n        const g = this.g / 255;\n        const b = this.b / 255;\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n        let h, s, l = (max + min) / 2;\n\n        if (max === min) {\n            h = s = 0;\n        } else {\n            const d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n            switch (max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2; break;\n                case b: h = (r - g) / d + 4; break;\n            }\n            h /= 6;\n        }\n\n        return {\n            h: h * 100,\n            s: s * 100,\n            l: l * 100,\n        };\n    }\n\n    /**\n     * 将颜色值限制在0-255之间\n     * @param {number} value - 颜色值\n     * @returns {number} 限制后的颜色值\n     */\n    clamp(value) {\n        return Math.max(0, Math.min(255, value));\n    }\n}\n\n/**\n * 解算器类，用于计算滤镜值\n */\nexport class Solver {\n    /**\n     * 创建一个Solver实例\n     * @param {Color} target - 目标颜色\n     */\n    constructor(target) {\n        this.target = target;\n        this.targetHSL = target.hsl();\n        this.reusedColor = new Color(0, 0, 0);\n    }\n\n    /**\n     * 解算最佳滤镜值\n     * @returns {{values: number[], loss: number, filter: string}} 解算结果\n     */\n    solve() {\n        const result = this.solveNarrow(this.solveWide());\n        return {\n            values: result.values,\n            loss: result.loss,\n            filter: this.css(result.values),\n        };\n    }\n\n    /**\n     * 宽范围解算\n     * @returns {{values: number[], loss: number}} 解算结果\n     */\n    solveWide() {\n        const A = 5;\n        const c = 15;\n        const a = [60, 180, 18000, 600, 1.2, 1.2];\n\n        let best = { loss: Infinity };\n        for (let i = 0; best.loss > 25 && i < 3; i++) {\n            const initial = [50, 20, 3750, 50, 100, 100];\n            const result = this.spsa(A, a, c, initial, 1000);\n            if (result.loss < best.loss) {\n                best = result;\n            }\n        }\n        return best;\n    }\n\n    /**\n     * 窄范围解算\n     * @param {Object} wide - 宽范围解算结果\n     * @returns {{values: number[], loss: number}} 解算结果\n     */\n    solveNarrow(wide) {\n        const A = wide.loss;\n        const c = 2;\n        const A1 = A + 1;\n        const a = [0.25 * A1, 0.25 * A1, A1, 0.25 * A1, 0.2 * A1, 0.2 * A1];\n        return this.spsa(A, a, c, wide.values, 500);\n    }\n\n    /**\n     * SPSA (Simultaneous Perturbation Stochastic Approximation) 算法\n     * @param {number} A - 初始步长系数\n     * @param {number[]} a - 步长参数\n     * @param {number} c - 扰动系数\n     * @param {number[]} values - 初始值\n     * @param {number} iters - 迭代次数\n     * @returns {{values: number[], loss: number}} 优化结果\n     */\n    spsa(A, a, c, values, iters) {\n        const alpha = 1;\n        const gamma = 0.16666666666666666;\n\n        let best = null;\n        let bestLoss = Infinity;\n        const deltas = new Array(6);\n        const highArgs = new Array(6);\n        const lowArgs = new Array(6);\n\n        for (let k = 0; k < iters; k++) {\n            const ck = c / Math.pow(k + 1, gamma);\n            for (let i = 0; i < 6; i++) {\n                deltas[i] = Math.random() > 0.5 ? 1 : -1;\n                highArgs[i] = values[i] + ck * deltas[i];\n                lowArgs[i] = values[i] - ck * deltas[i];\n            }\n\n            const lossDiff = this.loss(highArgs) - this.loss(lowArgs);\n            for (let i = 0; i < 6; i++) {\n                const g = lossDiff / (2 * ck) * deltas[i];\n                const ak = a[i] / Math.pow(A + k + 1, alpha);\n                values[i] = fix(values[i] - ak * g, i);\n            }\n\n            const loss = this.loss(values);\n            if (loss < bestLoss) {\n                best = values.slice(0);\n                bestLoss = loss;\n            }\n        }\n        return { values: best, loss: bestLoss };\n\n        function fix(value, idx) {\n            let max = 100;\n            if (idx === 2 /* saturate */) {\n                max = 7500;\n            } else if (idx === 4 /* brightness */ || idx === 5 /* contrast */) {\n                max = 200;\n            }\n\n            if (idx === 3 /* hue-rotate */) {\n                if (value > max) {\n                    value %= max;\n                } else if (value < 0) {\n                    value = max + value % max;\n                }\n            } else if (value < 0) {\n                value = 0;\n            } else if (value > max) {\n                value = max;\n            }\n            return value;\n        }\n    }\n\n    /**\n     * 计算损失值\n     * @param {number[]} filters - 滤镜值数组\n     * @returns {number} 损失值\n     */\n    loss(filters) {\n        const color = this.reusedColor;\n        color.set(0, 0, 0);\n\n        color.invert(filters[0] / 100);\n        color.sepia(filters[1] / 100);\n        color.saturate(filters[2] / 100);\n        color.hueRotate(filters[3] * 3.6);\n        color.brightness(filters[4] / 100);\n        color.contrast(filters[5] / 100);\n\n        const colorHSL = color.hsl();\n        return (\n            Math.abs(color.r - this.target.r) +\n            Math.abs(color.g - this.target.g) +\n            Math.abs(color.b - this.target.b) +\n            Math.abs(colorHSL.h - this.targetHSL.h) +\n            Math.abs(colorHSL.s - this.targetHSL.s) +\n            Math.abs(colorHSL.l - this.targetHSL.l)\n        );\n    }\n\n    /**\n     * 生成CSS滤镜字符串\n     * @param {number[]} filters - 滤镜值数组\n     * @returns {string} CSS滤镜字符串\n     */\n    css(filters) {\n        function fmt(idx, multiplier = 1) {\n            return Math.round(filters[idx] * multiplier);\n        }\n        return `invert(${fmt(0)}%) sepia(${fmt(1)}%) saturate(${fmt(2)}%) hue-rotate(${fmt(3, 3.6)}deg) brightness(${fmt(4)}%) contrast(${fmt(5)}%)`;\n    }\n}\n\n/**\n * 将十六进制颜色转换为RGB数组\n * @param {string} hex - 十六进制颜色字符串\n * @returns {number[]|null} RGB数组或null（如果转换失败）\n */\nexport function hexToRgb(hex) {\n    // 扩展缩写形式 (e.g. \"03F\") 到完整形式 (e.g. \"0033FF\")\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, (m, r, g, b) => {\n        return r + r + g + g + b + b;\n    });\n\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? [\n            parseInt(result[1], 16),\n            parseInt(result[2], 16),\n            parseInt(result[3], 16),\n        ] : null;\n}\n","import { toColor } from \"./to\";\nimport { getRandom } from \"./random\";\nimport { setStoreData, getStoreData } from \"./store\";\nimport { Color, Solver, hexToRgb } from \"../plugins/color\";\n\n/**\n * 获取系统位数\n * @returns {string} 系统位数\n */\nexport function getOsBit() {\n    const agent = navigator.userAgent.toLowerCase();\n    const isMac = /macintosh|mac os x/i.test(navigator.userAgent);\n    if (agent.includes(\"win32\") || agent.includes(\"wow32\")) {\n        return '32';\n    } else if (agent.includes(\"win64\") || agent.includes(\"wow64\")) {\n        return '64';\n    }\n    return isMac ? 'mac' : 'unknown';\n}\n\n/**\n * 获取当前浏览器名称和版本\n * @returns {{name: string, version: number|string}}\n */\nexport function getBrowserVersion() {\n    const ua = navigator.userAgent.toLowerCase();\n    const browserInfo = [\n        { name: 'ie', regex: /msie (\\d+)|trident/ },\n        { name: 'edge', regex: /edg\\/(\\d+)/ },\n        { name: 'qq', regex: /qqbrowser\\/(\\d+)/ },\n        { name: 'quark', regex: /quarkpc\\/(\\d+)/ },\n        { name: 'firefox', regex: /firefox\\/(\\d+)/ },\n        { name: 'chrome', regex: /chrome\\/(\\d+)/ },\n        { name: 'safari', regex: /safari\\/(\\d+)/ }\n    ];\n\n    for (const browser of browserInfo) {\n        const match = ua.match(browser.regex);\n        if (match) {\n            return {\n                name: browser.name,\n                version: browser.name === 'ie' && !match[1] ? '11' : parseInt(match[1])\n            };\n        }\n    }\n\n    return { name: 'unknown', version: 'unknown' };\n}\n\n/**\n * 页面全屏\n * @param {boolean} [type=true] true为全屏，false为退出全屏\n */\nexport function fullScreen(type = true) {\n    const elem = document.documentElement;\n    try {\n        if (type) {\n            const requestFullScreen = elem.requestFullscreen || elem.mozRequestFullScreen ||\n                elem.webkitRequestFullScreen || elem.msRequestFullscreen;\n            requestFullScreen.call(elem);\n        } else {\n            const exitFullScreen = document.exitFullscreen || document.mozCancelFullScreen ||\n                document.webkitExitFullscreen || document.msExitFullscreen;\n            exitFullScreen.call(document);\n        }\n    } catch (e) {\n        console.error(\"全屏操作失败:\", e);\n    }\n}\n\n/**\n * 新窗口打开链接\n * @param {string} url 要打开的URL\n */\nexport function newWindow(url) {\n    try {\n        const id = getRandom();\n        const a = document.createElement('a');\n        a.href = url;\n        a.target = '_blank';\n        a.id = id;\n        if (!document.getElementById(id)) {\n            document.body.appendChild(a);\n        }\n        a.click();\n        document.body.removeChild(a);\n    } catch (e) {\n        console.error(\"打开新窗口失败:\", e);\n        window.open(url, '_blank');\n    }\n}\n\n/**\n * 动态加载线上js文件\n * @param {string} src js文件地址\n * @param {string} [type='text/javascript'] js文件类型\n * @returns {Promise<void>}\n */\nexport function addOnJs(src, type = 'text/javascript') {\n    return new Promise((resolve, reject) => {\n        const script = document.createElement('script');\n        script.src = src;\n        script.type = type;\n        script.onload = resolve;\n        script.onerror = reject;\n        document.head.appendChild(script);\n    });\n}\n\n/**\n * 延迟等待\n * @param {number} [timeout=1000] 延迟时间（毫秒）\n * @returns {Promise<boolean>}\n */\nexport function asyncTime(timeout = 1000) {\n    return new Promise(resolve => setTimeout(() => resolve(true), timeout));\n}\n\n/**\n * 获取年份列表\n * @param {number} [end] 结束年份（默认今年）\n * @param {number} [start=2000] 开始年份\n * @returns {number[]}\n */\nexport function getYearList(end = new Date().getFullYear(), start = 2000) {\n    return Array.from({ length: end - start + 1 }, (_, i) => start + i);\n}\n\n/**\n * 获取月份列表\n * @returns {string[]}\n */\nexport function getMonthList() {\n    return Array.from({ length: 12 }, (_, i) => String(i + 1).padStart(2, '0'));\n}\n\n/**\n * 设置图片颜色样式\n * @param {string} id 图片元素ID\n * @param {string} value 十六进制的颜色值\n * @returns {Promise<boolean>}\n */\nexport async function setImageColorStyle(id, value) {\n    try {\n        const { result } = await setImageColor(value);\n        document.getElementById(id).style.filter = result.filter;\n        return true;\n    } catch (e) {\n        console.error(\"设置图片颜色样式失败:\", e);\n        return false;\n    }\n}\n\n/**\n * 设置图片颜色\n * @param {string} value 十六进制的颜色值\n * @returns {Promise<{rgb: number[], color: Color, result: Object}>}\n */\nexport async function setImageColor(value) {\n    const rgb = hexToRgb(value);\n    const color = new Color(rgb[0], rgb[1], rgb[2]);\n    const solver = new Solver(color);\n    const result = solver.solve();\n    return { rgb, color, result };\n}\n\n/**\n * 设置剪切板文本\n * @param {string} text 文本内容\n * @returns {Promise<boolean>}\n */\nexport async function setCopyText(text) {\n    try {\n        await navigator.clipboard.writeText(text);\n        return true;\n    } catch (e) {\n        console.error(\"设置剪切板文本失败:\", e);\n        return false;\n    }\n}\n\n/**\n * 获取剪切板文本\n * @returns {Promise<string|boolean>}\n */\nexport async function getCopyText() {\n    try {\n        return await navigator.clipboard.readText();\n    } catch (e) {\n        console.error(\"获取剪切板文本失败:\", e);\n        return false;\n    }\n}\n\n/**\n * 输入框插入内容\n * @param {number} startPos 光标开始位置\n * @param {number} endPos 光标结束位置\n * @param {string} value 输入框内容\n * @param {string} value2 插入内容\n * @returns {string}\n */\nexport function setPosInsert(startPos, endPos, value, value2) {\n    if (!value) return value2;\n    if (value.length === startPos) return value + value2;\n    return value.slice(0, startPos) + value2 + value.slice(endPos);\n}\n\n/**\n * 设置光标位置\n * @param {string} id 输入框ID\n * @param {number} pos 光标位置\n */\nexport function setPosRange(id, pos) {\n    try {\n        document.getElementById(id)?.setSelectionRange(pos, pos);\n    } catch (e) {\n        console.error(\"设置光标位置失败:\", e);\n    }\n}\n\n/**\n * 设置元素焦点\n * @param {string} id 输入框ID\n */\nexport function setElementFocus(id) {\n    try {\n        document.getElementById(id)?.focus();\n    } catch (e) {\n        console.error(\"设置元素焦点失败:\", e);\n    }\n}\n\n/**\n * 设置饿了么UI的主色调\n * @param {string} [color='#1ECC95'] 颜色值\n */\nexport const setElementMainColor = (color = '#1ECC95') => {\n    const el = document.documentElement;\n    el.style.setProperty('--el-color-primary', color);\n\n    [3, 5, 7, 8, 9].forEach(item => {\n        const amount = item === 3 ? 0.9 : item === 5 ? 0.7 : (10 - item) / 10;\n        const val = toColor('#FFFFFF', color, amount);\n        el.style.setProperty(`--el-color-primary-light-${item}`, val);\n    });\n\n    const darkVal = toColor('#000000', color, 0.9);\n    el.style.setProperty('--el-color-primary-dark-2', darkVal);\n};\n\n/**\n * 控制台打印\n * @param {string} name 名称\n * @param {string} tips 提示\n */\nexport function ulog(name, tips) {\n    console.log(\n        `%c ${name} %c ${tips} %c`,\n        'background:#0081ff; padding: 1px; border-radius: 3px 0 0 3px; color: #fff',\n        'background:#354855; padding: 1px 5px; border-radius: 0 3px 3px 0; color: #fff; font-weight: bold;',\n        'background:transparent'\n    );\n}\n\n/**\n * 控制台打印，来自 colorui 作者 - 文晓港\n * @param {string} micro 第一个名称\n * @param {string} name 用于区分不同的打印\n * @param {string} tips 打印的提示信息\n * @param {*} data 打印的数据\n */\nexport function clog(micro, name, tips, data) {\n    let nameList = getStoreData('clog_name', false, true) || '';\n    const nameListArr = nameList ? nameList.split(',') : [];\n    if (!nameListArr.includes(name)) {\n        nameListArr.push(name);\n        setStoreData('clog_name', nameListArr.join(','), true);\n    }\n\n    let index = Number(getStoreData(`clog_${name}_index`, false, true) || 0) + 1;\n    setStoreData(`clog_${name}_index`, index, true);\n\n    let colorList = getStoreData('clog_color', false, true)?.split(',') ||\n        ['#fbbd08', '#f37b1d', '#e54d42', '#e03997', '#b745cb', '#8044de', '#0081ff', '#37c0fe', '#6eb92b', '#8dc63f', '#8799a3', '#a5673f'];\n\n    let color = getStoreData(`clog_${name}_color`, false, true);\n    if (!color) {\n        color = colorList.shift() || '#000000';\n        setStoreData('clog_color', colorList.join(','), true);\n        setStoreData(`clog_${name}_color`, color, true);\n    }\n\n    console.log(\n        `%c ${micro} %c ${name} %c ${tips} `,\n        `background: #0081ff; padding: 1px; border-radius: 3px; color: #fff`,\n        `background: ${color}; padding: 1px; border-radius: 3px; margin-left:3px; color: #fff`,\n        'background: #35495e; padding: 1px; margin-left:3px; border-radius: 3px; color: #fff',\n        data\n    );\n}\n","// 创建一个全局的依赖注入容器\nconst dependencyContainer = Object.create(null);\n\n/**\n * 提供依赖的方法\n * @param {string} key   注入名\n * @param {*} value 提供的值\n * @throws {Error} 如果key不是字符串类型\n */\nexport function provide(key, value) {\n    if (typeof key !== 'string') {\n        throw new Error('依赖注入的key必须是字符串类型');\n    }\n    dependencyContainer[key] = value;\n}\n\n/**\n * 获取依赖的方法\n * @param {string} key           注入名\n * @param {*} [defaultValue] 注入默认值\n * @returns {*} 依赖值或默认值\n */\nexport function inject(key, defaultValue) {\n    if (typeof key !== 'string') {\n        console.warn('依赖注入的key应该是字符串类型');\n        return defaultValue;\n    }\n    return key in dependencyContainer ? dependencyContainer[key] : defaultValue;\n}\n\n/**\n * 检查是否存在某个依赖\n * @param {string} key 注入名\n * @returns {boolean} 是否存在该依赖\n */\nexport function has(key) {\n    return key in dependencyContainer;\n}\n\n/**\n * 移除某个依赖\n * @param {string} key 注入名\n */\nexport function remove(key) {\n    delete dependencyContainer[key];\n}\n\n/**\n * 清空所有依赖\n */\nexport function clear() {\n    for (const key in dependencyContainer) {\n        delete dependencyContainer[key];\n    }\n}\n","let iTimes\n\n//防止并发操作，阻止2毫秒内的操作\nexport function useClick() {\n    return new Promise((resolve) => {\n        clearTimeout(iTimes)\n        iTimes = setTimeout(() => {\n            resolve(true)\n        }, 200)\n    })\n}\n\n// 防抖函数\nexport function debounce(fn, delay = 200) {\n    let timer = null\n    return function() {\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n            fn.apply(this, arguments)\n        }, delay)\n    }\n}\n","/**\n * 创建一个微型跨文件、全局事件监听器\n * @param {Map} [all] - 可选的初始事件映射\n * @returns {Object} 事件监听器对象\n */\nexport function useMitt(all) {\n    // 事件名称到已注册处理程序函数的映射\n    all = all || new Map();\n\n    return {\n        /**\n         * 注册事件处理程序\n         * @param {string} key - 事件key\n         * @param {Function} fun - 事件处理函数\n         */\n        on(key, fun) {\n            if (typeof key !== 'string' || typeof fun !== 'function') {\n                console.error('on 方法的参数无效');\n                return;\n            }\n            let handlers = all.get(key);\n            if (handlers && handlers instanceof Set) {\n                handlers.add(fun);\n            } else {\n                all.set(key, new Set([fun]));\n            }\n        },\n\n        /**\n         * 注销事件处理程序\n         * @param {string} key - 事件key\n         * @param {Function} [fun] - 可选的特定事件处理函数\n         */\n        off(key, fun) {\n            if (typeof key !== 'string') {\n                console.error('off 方法的 key 参数无效');\n                return;\n            }\n            const handlers = all.get(key);\n            if (handlers) {\n                if (fun && typeof fun === 'function') {\n                    handlers.delete(fun);\n                } else {\n                    all.set(key, new Set());\n                }\n            }\n        },\n\n        /**\n         * 触发事件\n         * @param {string} key - 事件key\n         * @param {*} data - 传递给事件处理函数的数据\n         */\n        emit(key, data) {\n            if (typeof key !== 'string') {\n                console.error('emit 方法的 key 参数无效');\n                return;\n            }\n            const handlers = all.get(key);\n            if (handlers) {\n                handlers.forEach((handler) => {\n                    try {\n                        handler(data);\n                    } catch (error) {\n                        console.error(`${key} 的事件处理器发生错误:`, error);\n                    }\n                });\n            }\n        },\n\n        /**\n         * 清理所有事件监听器\n         */\n        clear() {\n            all.clear();\n        }\n    };\n}\n\n// 创建一个全局事件发射器实例\nexport const emitter = useMitt();\n","/*\r\n *      bignumber.js v9.1.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n    alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if less than two characters,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, -1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  // If any number is NaN, return NaN.\r\n  function maxOrMin(args, n) {\r\n    var k, y,\r\n      i = 1,\r\n      x = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      y = new BigNumber(args[i]);\r\n      if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) {\r\n      zc = xc;\r\n      xc = yc;\r\n      yc = zc;\r\n      i = xcL;\r\n      xcL = ycL;\r\n      ycL = i;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n      b = a;\r\n    }\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) {\r\n        i = g1;\r\n        g1 = g2;\r\n        g2 = i;\r\n        len -= i;\r\n      }\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n","import BigNumber from 'bignumber.js'\nimport {isNullES, isNumberReg} from \"../src\";\n\n/**\n * 数字计算\n * @param {string|number} num1 数字1\n * @param {string} type 类型 + - * / =\n * @param {string|number} num2 数字2\n * @returns {number|boolean|string}\n */\nexport function jfwNum(num1, type, num2)\n{\n    // 初始校验\n    if (isNullES(num1) || isNullES(type) || isNullES(num2)) {\n        console.warn('不能传递空参数')\n        return false\n    }\n    // 参数1检查\n    if (!isNumberReg(num1)) {\n        console.warn(num1, '请不要传递非数字的字符')\n        return false\n    }\n    // 类型检查\n    if (['+','-','*','/','='].indexOf(type) === -1) {\n        console.warn('类型不能为空，请传递 + - * / =')\n        return false\n    }\n    // 参数2检查\n    if (!isNumberReg(num2)) {\n        console.warn(num2, '请不要传递非数字的字符')\n        return false\n    }\n\n    // 处理参数\n    const param1 = new BigNumber(num1)\n    const param2 = new BigNumber(num2)\n\n    let result;\n\n    switch(type) {\n        case '+':\n            result = param1.plus(param2);\n            break;\n        case '-':\n            result = param1.minus(param2);\n            break;\n        case '*':\n            result = param1.multipliedBy(param2);\n            break;\n        case '/':\n            // 检查除数是否为零\n            if (param2.isZero()) {\n                console.warn('除数不能为零');\n                return false;\n            }\n            result = param1.dividedBy(param2);\n            break;\n        case '=':\n            const compareResult = param1.comparedTo(param2);\n            return compareResult === 0 ? '等于' : (compareResult > 0 ? '大于' : '小于');\n    }\n\n    // 检查结果是否为无穷大或NaN\n    if (result.isNaN() || !result.isFinite()) {\n        console.warn('计算结果无效');\n        return false;\n    }\n\n    return result.toNumber();\n}\n\nexport {BigNumber}\n","/**\n * 创建一个延迟渲染检查器\n * @param {number} maxFrameCount - 最大帧数，默认为1000\n * @returns {Function} - 返回一个函数用于检查是否应该渲染\n */\nexport function useDefer(maxFrameCount = 1000) {\n    // 参数验证\n    if (typeof maxFrameCount !== 'number' || maxFrameCount <= 0) {\n        throw new Error('maxFrameCount必须是一个正数');\n    }\n\n    let frameCount = 0;\n    let animationFrameId = null;\n    let isRunning = true;\n\n    /**\n     * 刷新帧计数\n     */\n    function refreshFrameCount() {\n        if (!isRunning) return;\n\n        animationFrameId = requestAnimationFrame(() => {\n            if (frameCount < maxFrameCount) {\n                frameCount++;\n                refreshFrameCount();\n            }\n        });\n    }\n\n    // 开始计数\n    refreshFrameCount();\n\n    /**\n     * 检查是否应该渲染\n     * @param {number} showInFrameCount - 应该在第几帧开始渲染\n     * @returns {boolean} - 是否应该渲染\n     */\n    function deferCheck(showInFrameCount) {\n        if (typeof showInFrameCount !== 'number' || showInFrameCount < 0) {\n            throw new Error('showInFrameCount必须是一个非负数');\n        }\n        return frameCount >= showInFrameCount;\n    }\n\n    /**\n     * 停止计数并清理资源\n     */\n    function stop() {\n        isRunning = false;\n        if (animationFrameId !== null) {\n            cancelAnimationFrame(animationFrameId);\n            animationFrameId = null;\n        }\n    }\n\n    // 返回一个对象，包含检查函数和停止函数\n    return {\n        deferCheck,\n        stop\n    };\n}\n"],"names":["toString","Object","prototype","isString","value","isArray","Array","isObject","isFunction","func","AsyncFunction","constructor","areaSet","verifyCardNum","cardNum","serializedCardNum","trim","length","test","areaCode","Number","slice","includes","birth","serializedBirth","birthDate","Date","now","earliestDate","isNaN","getTime","verifyBirthDate","masterCode","split","map","checkCode","toLowerCase","weightingFactor","reduce","pre","cur","ix","verifyCheckCode","isNullES","isAllNull","keys","isObjNull","isNumberReg","text","allowNegative","String","arrIndex","arr","field","key","findIndex","item","arrDel","index","indexOf","arrToKey","join","obj","arrCompare","order","a","b","hasOwnProperty","varA","toUpperCase","varB","comparison","DRAFTABLE","Symbol","for","isPlainObject","proto","getPrototypeOf","Ctor","call","Function","isDraftable","Boolean","produce","baseState","fn","drafts","Map","copies","objectTraps","get","target","data","getDraft","Reflect","set","val","copy","shallowCopy","newValue","has","draft","Proxy","assign","finalize","isChange","forEach","e","console","error","result","clear","getObjValue","returnFalseIfEmpty","getObjVal","res","SIZE_UNITS","SIZE_BASES","_","i","Math","pow","getFileSuffix","name","substring","lastIndexOf","parseFileName","disposition","matches","exec","decodeURIComponent","replace","NUM","XEU","DEU","getRandom","num","type","from","floor","random","toColor","c1","c2","ratio","max","min","r1","parseInt","g1","b1","r2","g2","b2","round","x","padStart","calcDate","date1","date2","diff","abs","days","hours","minutes","seconds","parseRgb","rgb","match","setStoreData","session","content","dataType","datetime","storage","window","sessionStorage","localStorage","setItem","JSON","stringify","setStore","getStoreData","debug","getStore","delStoreData","removeItem","removeStore","getItem","parse","Color","r","g","this","clamp","hueRotate","angle","PI","sin","cos","multiply","grayscale","sepia","saturate","matrix","newR","newG","newB","brightness","linear","contrast","slope","intercept","invert","hsl","h","s","l","d","Solver","targetHSL","reusedColor","solve","solveNarrow","solveWide","values","loss","filter","css","best","Infinity","initial","spsa","wide","A","A1","c","iters","bestLoss","deltas","highArgs","lowArgs","k","ck","lossDiff","ak","fix","idx","filters","color","colorHSL","fmt","multiplier","async","setImageColor","hex","m","hexToRgb","dependencyContainer","create","iTimes","useMitt","all","on","fun","handlers","Set","add","off","delete","emit","handler","emitter","isNumeric","mathceil","ceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","coeffToString","z","j","charCodeAt","compare","y","xc","yc","intCheck","Error","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","BigNumber","clone","configObject","div","convertBase","parseNumeric","pow2_53","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabetHasNormalDecimalDigits","v","alphabet","caseChanged","isNum","_isBigNumber","search","DEBUG","push","format","rm","id","c0","ne","maxOrMin","args","normalise","pop","sd","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","p","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","minimum","dp","rand","Uint32Array","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","reverse","sign","callerIsToString","concat","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","p1","p2","absoluteValue","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","gt","isGreaterThanOrEqualTo","gte","isLessThan","lt","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","toStringTag","ArrToOneObj","objName","arrName","children","src","Promise","resolve","reject","script","document","createElement","onload","onerror","head","appendChild","arr1","arr2","sort","item1","item2","index1","index2","newArr","some","timeout","setTimeout","base64","binary","atob","array","Uint8Array","fileBlob","Blob","File","micro","tips","nameList","nameListArr","colorList","shift","log","fill","delay","timer","clearTimeout","apply","deepClone","cache","WeakMap","cloneTarget","blob","blobURL","URL","createObjectURL","tempLink","style","display","href","filename","setAttribute","download","body","click","removeChild","revokeObjectURL","size","unit","formattedSize","formRef","validate","valid","elem","documentElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullScreen","msRequestFullscreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","ua","navigator","userAgent","browserInfo","regex","browser","version","clipboard","readText","typeMap","fileType","mergedTypeMap","image","video","audio","compress","extensions","entries","Element","agent","isMac","lower","upper","time","randomUUID","end","getFullYear","start","lowerVal","defaultValue","warn","variable","nodeName","nodeType","file","accept","extension","baseType","acceptedType","startsWith","byte","then","catch","num1","num2","param1","param2","compareResult","headers","getDisposition","status","msg","err","message","url","getElementById","open","objEqual","obj1","obj2","keys1","keys2","val1","val2","areObjects","price","recursionChildren","parameter","childrenArr","writeText","focus","el","setProperty","darkVal","startPos","endPos","value2","pos","setSelectionRange","spacing","FormData","append","amount","form","encodeURIComponent","isLight","black","white","maxFrameCount","frameCount","animationFrameId","isRunning","refreshFrameCount","requestAnimationFrame","deferCheck","showInFrameCount","stop","cancelAnimationFrame"],"mappings":"iPACA,MAAMA,EAAWC,OAAOC,UAAUF,SAwC3B,SAASG,EAASC,GACrB,MAAwB,iBAAVA,CAClB,CAyBO,SAASC,EAAQD,GACpB,OAAOE,MAAMD,QAAQD,EACzB,CAOO,SAASG,EAASH,GACrB,OAAiB,OAAVA,GAAmC,iBAAVA,IAAuBE,MAAMD,QAAQD,EACzE,CAgBO,SAASI,EAAWC,GACvB,MAAuB,mBAATA,CAClB,CAkCA,MAAMC,GAAgB,UAAe,GAAEC,YC9HxB,IAAAC,EAAA,CACX,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OACxI,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChE,OAAQ,OAAQ,OAAQ,OAAQ,OAA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","x_google_ignoreList":[16]}